C251 COMPILER V5.60.0,  control                                                            10/10/25  23:25:44  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE control
OBJECT MODULE PLACED IN .\out_file\control.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\control.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE) 
                    -BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_drive
                    -r;..\user;..\code) DEBUG PRINT(.\out_file\control.lst) OBJECT(.\out_file\control.obj) 

stmt  level    source

    1          #include "control.h"
    2          
    3          unsigned char CAR_Mode=STOP;
    4          void Ser_Servo_Duty(int value)
    5          {
    6   1          pwm_set_duty(Servo_Pwm,value);
    7   1      }
    8           /*函数：舵机的pid控制
    9           * 作用：利用电磁归一化后的信号控制舵机，
   10           * 参数1：设定的归一化目标值
   11           * 参数2：舵机最小转向值
   12           * 参数3：舵机最大转向值
   13           * 例子：Servo_turn_pid(变量,-80,80);
   14           * 将变量的值与0进行对比，输出信号控制舵机,而舵机的限幅是正负80
   15           */
   16          int Servo_turn_pid(float Current)
   17          {
   18   1          float kp = servo_pid.Kp;           
   19   1          float kd = servo_pid.Kd;
   20   1          float last_error = servo_pid.LastError;
   21   1          float error = Current;
   22   1              float temp ;
   23   1          
   24   1          float out = kp * error + kd * (error - last_error);
   25   1          
   26   1          servo_pid.LastError = error;
   27   1          
   28   1          temp = func_limit_ab(out, Servo_min, Servo_max);
   29   1          return (int)(temp + (temp >= 0 ? 0.5f : -0.5f));
   30   1      }
   31          /*
   32          *左路速度环控制
   33          */
   34          int Motor_left_pid(int point,int NowData)
   35          {
   36   1          // 将频繁访问的结构体成员加载到局部变量
   37   1          float kp = M_left_pid.Kp;       
   38   1              float ki = M_left_pid.Ki;
   39   1          int error = point - NowData;
   40   1              float out = 0 ;
   41   1          M_left_pid.Out_I += error;
   42   1              if (M_left_pid.Out_I > Motor_Max) M_left_pid.Out_I = Motor_Max;
   43   1              if (M_left_pid.Out_I < -Motor_Max) M_left_pid.Out_I = -Motor_Max;
   44   1          // 使用局部变量计算
   45   1          out = kp * error + ki *M_left_pid.Out_I;
   46   1          if (out > 10000) out = 10000;
   47   1              if (out < -10000) out = -10000;
   48   1          return (int)(out + (out >= 0 ? 0.5f : -0.5f));
   49   1      }
   50          /*
   51          *右路速度环控制
   52          */
   53          
   54          int Motor_Right_pid(int point,int NowData)
   55          {
   56   1          // 将频繁访问的结构体成员加载到局部变量
   57   1          float kp = M_Right_pid.Kp;       
C251 COMPILER V5.60.0,  control                                                            10/10/25  23:25:44  PAGE 2   

   58   1              float ki = M_Right_pid.Ki;
   59   1          int error = point - NowData;
   60   1              float out = 0 ;
   61   1          M_Right_pid.Out_I += error;
   62   1              if (M_Right_pid.Out_I > Motor_Max) M_Right_pid.Out_I = Motor_Max;
   63   1              if (M_Right_pid.Out_I < -Motor_Max) M_Right_pid.Out_I = -Motor_Max;
   64   1          // 使用局部变量计算
   65   1          out = kp * (error) + ki * (M_Right_pid.Out_I);
   66   1          if (out > 10000) out = 10000;
   67   1              if (out < -10000) out = -10000;
   68   1          return (int)(out + (out >= 0 ? 0.5f : -0.5f));
   69   1      }
   70          /*
   71           * 函数功能：左路电机PWM设置
   72           * 函数名称：MotorL_SetSpeed(unsigned char);
   73           * 输入参数：想要的PWM值
   74           * 输出参数：无
   75           */
   76          void MotorL_SetSpeed(int pwm)
   77          {
   78   1              if(pwm>Motor_Max){pwm=Motor_Max;}
   79   1              if(pwm<-Motor_Max){pwm=-Motor_Max;}
   80   1          if(pwm>=0)
   81   1          {
   82   2              pwm_set_duty(MotorL_pwm1,pwm);
   83   2              pwm_set_duty(MotorL_pwm2,0);
   84   2          }
   85   1          else
   86   1          {
   87   2              pwm_set_duty(MotorL_pwm2,-pwm);
   88   2              pwm_set_duty(MotorL_pwm1,0);
   89   2          }
   90   1      }
   91          /*
   92           * 函数功能：右路电机PWM设置
   93           * 函数名称：MotorR_SetSpeed(unsigned char);
   94           * 输入参数：想要的PWM值
   95           * 输出参数：无
   96           */
   97          void MotorR_SetSpeed(int pwm)
   98          {
   99   1          if(pwm>=0)
  100   1          {
  101   2              pwm_set_duty(MotorR_pwm1,pwm);
  102   2              pwm_set_duty(MotorR_pwm2,0);
  103   2          }
  104   1          else
  105   1          {
  106   2              pwm_set_duty(MotorR_pwm2,-pwm);
  107   2              pwm_set_duty(MotorR_pwm1,0);
  108   2          }
  109   1      }
  110          /*
  111           * 函数功能：电机驱动更新
  112           * 函数名称：Motor_Update(0);
  113           * 输入参数：无
  114           * 输出参数：无
  115           * 可以进行拓展，写速度策略
  116           */
  117          void Motor_Update(char X)
  118          {  
  119   1              switch(CAR_Mode)
  120   1              {
  121   2                      case GO:
  122   2                      {
  123   3                              MotorR_SetSpeed(100*(ML+X));
C251 COMPILER V5.60.0,  control                                                            10/10/25  23:25:44  PAGE 3   

  124   3                              MotorL_SetSpeed(100*(MR+X));
  125   3                      }break;
  126   2                      case GO_Pararm1:
  127   2                      {
  128   3                              MotorR_SetSpeed(100*(ML1+X));
  129   3                              MotorL_SetSpeed(100*(MR1+X));
  130   3                      }break;
  131   2                      case GO_Pararm2:
  132   2                      {
  133   3                              MotorR_SetSpeed(100*(ML2+X));
  134   3                              MotorL_SetSpeed(100*(MR2+X));
  135   3                      }break;
  136   2                      case GO_Pararm3:
  137   2                      {
  138   3                              MotorR_SetSpeed(100*(ML3+X));
  139   3                              MotorL_SetSpeed(100*(MR3+X));
  140   3                      }break;
  141   2                      default:break;
  142   2              }
  143   1              
  144   1      }
  145          void PID_Update()
  146          {  
  147   1              switch(CAR_Mode)
  148   1              {
  149   2                      case GO:
  150   2                      {
  151   3                              servo_pid.Kp = KP;
  152   3                              servo_pid.Ki = 0;
  153   3                              servo_pid.Kd = KD;
  154   3                              M_left_pid.Kp = ML_KP;
  155   3                              M_left_pid.Ki = ML_KI;
  156   3                              M_Right_pid.Kp = MR_KP;
  157   3                              M_Right_pid.Ki = MR_KI;
  158   3                      }break;
  159   2                      case GO_Pararm1:
  160   2                      {
  161   3                              servo_pid.Kp = KP1;
  162   3                              servo_pid.Ki = 0;
  163   3                              servo_pid.Kd = KD1;
  164   3                              M_left_pid.Kp = ML_KP1;
  165   3                              M_left_pid.Ki = ML_KI1;
  166   3                              M_Right_pid.Kp = MR_KP1;
  167   3                              M_Right_pid.Ki = MR_KI1;
  168   3                      }break;
  169   2                      case GO_Pararm2:
  170   2                      {
  171   3                              servo_pid.Kp = KP2;
  172   3                              servo_pid.Ki = 0;
  173   3                              servo_pid.Kd = KD2;
  174   3                              M_left_pid.Kp = ML_KP2;
  175   3                              M_left_pid.Ki = ML_KI2;
  176   3                              M_Right_pid.Kp = MR_KP2;
  177   3                              M_Right_pid.Ki = MR_KI2;
  178   3                      }break;
  179   2                      case GO_Pararm3:
  180   2                      {
  181   3                              servo_pid.Kp = KP3;
  182   3                              servo_pid.Ki = 0;
  183   3                              servo_pid.Kd = KD3;
  184   3                              M_left_pid.Kp = ML_KP3;
  185   3                              M_left_pid.Ki = ML_KI3;
  186   3                              M_Right_pid.Kp = MR_KP3;
  187   3                              M_Right_pid.Ki = MR_KI3;
  188   3                      }break;
  189   2              }
C251 COMPILER V5.60.0,  control                                                            10/10/25  23:25:44  PAGE 4   

  190   1              
  191   1      }
  192          
  193          void Cycle_Update(void)
  194          {
  195   1              switch(CAR_Mode)
  196   1              {
  197   2                      case GO:
  198   2                      {
  199   3                              Entern_Flag_Time        =Entern_Flag_Time0              ;
  200   3                              Entern_Delay_Time       =Entern_Delay_Time0             ;
  201   3                              Entern_Continue_Time=Entern_Continue_Time0      ;
  202   3                              Mode_Flag                       =Mode_Flag0                             ;
  203   3                              turn_Value                      =turn_Value0                    ;
  204   3                      }break;
  205   2                      case GO_Pararm1:
  206   2                      {
  207   3                              Entern_Flag_Time        =Entern_Flag_Time1              ;
  208   3                              Entern_Delay_Time       =Entern_Delay_Time1             ;
  209   3                              Entern_Continue_Time=Entern_Continue_Time1      ;
  210   3                              Mode_Flag                       =Mode_Flag1                             ;
  211   3                              turn_Value                      =turn_Value1                    ;
  212   3                      }break;
  213   2                      case GO_Pararm2:
  214   2                      {
  215   3                              Entern_Flag_Time        =Entern_Flag_Time2              ;
  216   3                              Entern_Delay_Time       =Entern_Delay_Time2             ;
  217   3                              Entern_Continue_Time=Entern_Continue_Time2      ;
  218   3                              Mode_Flag                       =Mode_Flag2                             ;
  219   3                              turn_Value                      =turn_Value2                    ;
  220   3                      }break;
  221   2                      case GO_Pararm3:
  222   2                      {
  223   3                              Entern_Flag_Time        =Entern_Flag_Time3              ;
  224   3                              Entern_Delay_Time       =Entern_Delay_Time3             ;
  225   3                              Entern_Continue_Time=Entern_Continue_Time3      ;
  226   3                              Mode_Flag                       =Mode_Flag3                             ;
  227   3                              turn_Value                      =turn_Value3                    ;
  228   3                      }break;
  229   2              }
  230   1      }
  231          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      2080     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =         1     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
