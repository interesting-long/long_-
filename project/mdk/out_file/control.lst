C251 COMPILER V5.60.0,  control                                                            05/10/25  16:56:48  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE control
OBJECT MODULE PLACED IN .\out_file\control.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\control.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE) 
                    -BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_drive
                    -r;..\user;..\code) DEBUG PRINT(.\out_file\control.lst) OBJECT(.\out_file\control.obj) 

stmt  level    source

    1          #include "control.h"
    2          
    3          unsigned char CAR_Mode=STOP;
    4          void Ser_Servo_Duty(int value)
    5          {
    6   1          pwm_set_duty(Servo_Pwm,value);
    7   1      }
    8           /*函数：舵机的pid控制
    9           * 作用：利用电磁归一化后的信号控制舵机，
   10           * 参数1：设定的归一化目标值
   11           * 参数2：舵机最小转向值
   12           * 参数3：舵机最大转向值
   13           * 例子：Servo_turn_pid(变量,-80,80);
   14           * 将变量的值与0进行对比，输出信号控制舵机,而舵机的限幅是正负80
   15           */
   16          int Servo_turn_pid(float Current)
   17          {
   18   1          // 将频繁访问的结构体成员加载到局部变量
   19   1          float kp = servo_pid.Kp;           // 缓存到快速存储区
   20   1          float kd = servo_pid.Kd;
   21   1          float last_error = servo_pid.LastError;
   22   1          float error = Current;
   23   1              float temp ;
   24   1          
   25   1          // 使用局部变量计算
   26   1          float out = kp * error + kd * (error - last_error)+Help_turn();
   27   1          
   28   1          // 写回必要的结构体成员
   29   1          servo_pid.LastError = error;
   30   1          
   31   1          temp = func_limit_ab(out, Servo_min, Servo_max);
   32   1          return (int)(temp + (temp >= 0 ? 0.5f : -0.5f));
   33   1      }
   34          //int Servo_turn_pid(float Current)
   35          //{
   36          //    // 放大误差为整数
   37          //    int32_t error = (int32_t)(Current * 100);             // ×100
   38          //    int32_t last_error = (int32_t)(servo_pid.LastError);  // ×100
   39          //    int32_t kp = (int32_t)(servo_pid.Kp * 100);           // ×100
   40          //    int32_t kd = (int32_t)(servo_pid.Kd * 100);           // ×100
   41          
   42          //    // 使用32位，防止溢出 ?
   43          //    int32_t out = kp * error + kd * (error - last_error);  // ×10000
   44          
   45          //    // 更新误差
   46          //    servo_pid.LastError = error; // ? 保持 ×100 的误差存储方式
   47          
   48          //    // 缩回到 ×1 倍输出（比如 -100~+100）
   49          //    out = out / 10000;
   50          
   51          //    // 限幅（这里 Servo_min / Servo_max 必须是 ×1 本身的范围） ?
   52          //    if (out > Servo_max) out = Servo_max;
   53          //    if (out < Servo_min) out = Servo_min;
   54          
   55          //    return (int)out;  // ? 最终返回还是 "正常倍数"
   56          //}
   57          
C251 COMPILER V5.60.0,  control                                                            05/10/25  16:56:48  PAGE 2   

   58          /*
   59           * 函数功能：左路电机PWM设置
   60           * 函数名称：MotorL_SetSpeed(unsigned char);
   61           * 输入参数：想要的PWM值
   62           * 输出参数：无
   63           */
   64          void MotorL_SetSpeed(int pwm)
   65          {
   66   1          if(pwm>=0)
   67   1          {
   68   2              pwm_set_duty(MotorL_pwm1,pwm);
   69   2              pwm_set_duty(MotorL_pwm2,0);
   70   2          }
   71   1          else
   72   1          {
   73   2              pwm_set_duty(MotorL_pwm2,-pwm);
   74   2              pwm_set_duty(MotorL_pwm1,0);
   75   2          }
   76   1      }
   77          /*
   78           * 函数功能：右路电机PWM设置
   79           * 函数名称：MotorR_SetSpeed(unsigned char);
   80           * 输入参数：想要的PWM值
   81           * 输出参数：无
   82           */
   83          void MotorR_SetSpeed(int pwm)
   84          {
   85   1          if(pwm>0)
   86   1          {
   87   2              pwm_set_duty(MotorR_pwm1,pwm);
   88   2              pwm_set_duty(MotorR_pwm2,0);
   89   2          }
   90   1          else
   91   1          {
   92   2              pwm_set_duty(MotorR_pwm2,-pwm);
   93   2              pwm_set_duty(MotorR_pwm1,0);
   94   2          }
   95   1      }
   96          /*
   97           * 函数功能：电机驱动更新
   98           * 函数名称：Motor_Update(0);
   99           * 输入参数：无
  100           * 输出参数：无
  101           * 可以进行拓展，写速度策略
  102           */
  103          void Motor_Update(char X)
  104          {  
  105   1              switch(CAR_Mode)
  106   1              {
  107   2                      case GO:
  108   2                      {
  109   3                              MotorR_SetSpeed(100*(ML+X));
  110   3                              MotorL_SetSpeed(100*(MR+X));
  111   3                      }break;
  112   2                      case GO_Pararm1:
  113   2                      {
  114   3                              MotorR_SetSpeed(100*(ML1+X));
  115   3                              MotorL_SetSpeed(100*(MR1+X));
  116   3                      }break;
  117   2                      case GO_Pararm2:
  118   2                      {
  119   3                              MotorR_SetSpeed(100*(ML2+X));
  120   3                              MotorL_SetSpeed(100*(MR2+X));
  121   3                      }break;
  122   2                      case GO_Pararm3:
  123   2                      {
C251 COMPILER V5.60.0,  control                                                            05/10/25  16:56:48  PAGE 3   

  124   3                              MotorR_SetSpeed(100*(ML3+X));
  125   3                              MotorL_SetSpeed(100*(MR3+X));
  126   3                      }break;
  127   2              }
  128   1              
  129   1      }
  130          void PID_Update()
  131          {  
  132   1              switch(CAR_Mode)
  133   1              {
  134   2                      case GO:
  135   2                      {
  136   3                              servo_pid.Kp = KP;
  137   3                              servo_pid.Ki = 0;
  138   3                              servo_pid.Kd = KD;
  139   3                      }break;
  140   2                      case GO_Pararm1:
  141   2                      {
  142   3                              servo_pid.Kp = KP1;
  143   3                              servo_pid.Ki = 0;
  144   3                              servo_pid.Kd = KD1;
  145   3                      }break;
  146   2                      case GO_Pararm2:
  147   2                      {
  148   3                              servo_pid.Kp = KP2;
  149   3                              servo_pid.Ki = 0;
  150   3                              servo_pid.Kd = KD2;
  151   3                      }break;
  152   2                      case GO_Pararm3:
  153   2                      {
  154   3                              servo_pid.Kp = KP3;
  155   3                              servo_pid.Ki = 0;
  156   3                              servo_pid.Kd = KD3;
  157   3                      }break;
  158   2              }
  159   1              
  160   1      }
  161          
  162          void Cycle_Update(void)
  163          {
  164   1              switch(CAR_Mode)
  165   1              {
  166   2                      case GO:
  167   2                      {
  168   3                              Entern_Flag_Time        =Entern_Flag_Time0              ;
  169   3                              Entern_Delay_Time       =Entern_Delay_Time0             ;
  170   3                              Entern_Continue_Time=Entern_Continue_Time0      ;
  171   3                              Mode_Flag                       =Mode_Flag0                             ;
  172   3                              turn_Value                      =turn_Value0                    ;
  173   3                      }break;
  174   2                      case GO_Pararm1:
  175   2                      {
  176   3                              Entern_Flag_Time        =Entern_Flag_Time1              ;
  177   3                              Entern_Delay_Time       =Entern_Delay_Time1             ;
  178   3                              Entern_Continue_Time=Entern_Continue_Time1      ;
  179   3                              Mode_Flag                       =Mode_Flag1                             ;
  180   3                              turn_Value                      =turn_Value1                    ;
  181   3                      }break;
  182   2                      case GO_Pararm2:
  183   2                      {
  184   3                              Entern_Flag_Time        =Entern_Flag_Time2              ;
  185   3                              Entern_Delay_Time       =Entern_Delay_Time2             ;
  186   3                              Entern_Continue_Time=Entern_Continue_Time2      ;
  187   3                              Mode_Flag                       =Mode_Flag2                             ;
  188   3                              turn_Value                      =turn_Value2                    ;
  189   3                      }break;
C251 COMPILER V5.60.0,  control                                                            05/10/25  16:56:48  PAGE 4   

  190   2                      case GO_Pararm3:
  191   2                      {
  192   3                              Entern_Flag_Time        =Entern_Flag_Time3              ;
  193   3                              Entern_Delay_Time       =Entern_Delay_Time3             ;
  194   3                              Entern_Continue_Time=Entern_Continue_Time3      ;
  195   3                              Mode_Flag                       =Mode_Flag3                             ;
  196   3                              turn_Value                      =turn_Value3                    ;
  197   3                      }break;
  198   2              }
  199   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1339     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =         1         12
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
