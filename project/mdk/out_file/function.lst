C251 COMPILER V5.60.0,  function                                                           13/10/25  21:50:55  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\out_file\function.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\function.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\function.lst) OBJECT(.\out_file\function.obj) 

stmt  level    source

    1          #include "function.h"
    2          int Set_T=0;
    3          int T3=0;
    4          
    5          PID servo_pid;
    6          PID M_left_pid;
    7          PID M_Right_pid;
    8          int dajiao=0;
    9          unsigned char Protect_flag= 0;
   10          unsigned char Servo_Flag=0;
   11          
   12          unsigned char ADC_Show_Flag=0;
   13          unsigned char Key_Flag=1;
   14          unsigned char Init_Fg=0;
   15          unsigned char GO_PID_Control=0;
   16          unsigned char GO_PID_Control1=0;
   17          unsigned char GO_PID_Control2=0;
   18          unsigned char GO_PID_Control3=0;
   19          
   20          int16 encoder_data_dir_1 = 0;
   21          int16 encoder_data_dir_2 = 0;
   22          /*º¯Êý£º³£¼ûµÄPID¼ÆËã
   23           * ²ÎÊý1£º½á¹¹Ìå±äÁ¿µÄµØÖ·
   24           * ²ÎÊý2£ºµ±Ç°Öµ
   25           * ²ÎÊý3£ºÄ¿±êÖµ
   26           * Àý×Ó£ºNormal_PID(&servo_pid,MID_W-mid,0);//½«servoµÄpid²ÎÊýÉèÖÃÎªÒÔÖÐÏß¼ÓÈ¨ÖµºÍÖÐÏßÖµÖ®²îÉèÖÃÎªÄ¿±êÖµ£
             -º0
   27           */
   28          float Normal_PID(PID *PID,float NowData,float Point)
   29          {
   30   1      
   31   1          PID->LastError=PID->Error;
   32   1          PID->Error = Point - NowData;
   33   1          PID->Out_D=PID->Error- PID->LastError;              //DÏî
   34   1          PID->Out_I+=PID->Error;                             //IÏî
   35   1          PID->Out_P=PID->Error;                              //PÏî
   36   1          return (PID->Kp * PID->Out_P + PID->Ki*PID->Out_I + PID->Kd * PID->Out_D);
   37   1      }
   38          /* º¯Êý£º¹éÒ»»¯º¯Êý
   39           * ²ÎÊý1£ºÎÞ
   40           * ·µ»ØÖµ£ºÎÞ
   41           * Àý×Ó/×÷ÓÃ£º½«¶ÁÈ¡µÄADCÖµÁ¿»¯Îª¾àÀë
   42           */
   43          float unification(void) 
   44          {
   45   1          int16_t left_1  = filtered_adc[0];
   46   1          int16_t left_2  = filtered_adc[1];
   47   1          int16_t right_2 = filtered_adc[2];
   48   1          int16_t right_1 = filtered_adc[3];
   49   1      
   50   1          int32_t he = left_2 + right_2;
   51   1          if (he < 10) return 0.0f;
   52   1          return (fast_sqrt(left_1) - fast_sqrt(right_1)) * (100.0f / he);
   53   1      }
   54          /*¿ìËÙ¿ª·½º¯Êý*/
   55          float fast_sqrt(float number) 
   56          {
C251 COMPILER V5.60.0,  function                                                           13/10/25  21:50:55  PAGE 2   

   57   1          unsigned long i;
   58   1          float x = number;
   59   1          
   60   1          if (number <= 0.0f) return 0.0f;
   61   1          
   62   1          memcpy(&i, &x, 4);
   63   1          
   64   1          i = 532267893U + (i >> 1);
   65   1          
   66   1          memcpy(&x, &i, 4);
   67   1      
   68   1          x = 0.5f * (x + number / x);
   69   1          return x;
   70   1      }
   71          /*µç»ú³õÊ¼»¯*/
   72          void Motor_Init(void)
   73          {
   74   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   75   1          pwm_init(MotorL_pwm2, 17000, 0);
   76   1          pwm_init(MotorL_pwm1, 17000, 0);
   77   1          pwm_init(MotorR_pwm2, 17000, 0);
   78   1          pwm_init(MotorR_pwm1, 17000, 0);
   79   1      }
   80          
   81          
   82          void Servo_Init()
   83          {
   84   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   85   1      }
   86          void CAR_STOP()
   87          {
   88   1              MotorL_SetSpeed(0);
   89   1              MotorR_SetSpeed(0);
   90   1              Ser_Servo_Duty(Servo_Mide);
   91   1      }
   92          
   93          //Í£³µ¼ì²â
   94          void Protect()
   95          {
   96   1              if(CAR_Mode!= STOP)
   97   1              {
   98   2                      if((ADC_1+ADC_2+ADC_3+ADC_4)<Pro )
   99   2                      {
  100   3                              Protect_flag=1;
  101   3                      }
  102   2              }
  103   1      }
  104          /*×Ô¶¨Òå³õÊ¼»¯º¯Êý¿â*/
  105          void init_all()
  106          {
  107   1              EA=0;
  108   1      //      wireless_uart_init();
  109   1              system_delay_ms(10);
  110   1              Motor_Init();
  111   1              Servo_Init();
  112   1      
  113   1              interrupt_set_priority(INT1_IRQn,1);
  114   1              system_delay_ms(5);
  115   1              Buzzer_Init();
  116   1              Buzzer_OFF();
  117   1              enconder_init();
  118   1              
  119   1              
  120   1              ADC_GetInit();
  121   1              tft180_init();
  122   1              system_delay_ms(100);
C251 COMPILER V5.60.0,  function                                                           13/10/25  21:50:55  PAGE 3   

  123   1              tft180_set_color(RGB565_RED,RGB565_WHITE);
  124   1      //      eeprom_read_Num();
  125   1              menu_Init();
  126   1              system_delay_ms(10);
  127   1              
  128   1              pit_ms_init(TIM1_PIT, 5);
  129   1      //      pit_ms_init(TIM2_PIT, 5);
  130   1          EA=1;
  131   1              
  132   1      }
  133          void show_test_info(const char* info) 
  134          {
  135   1          tft180_clear(RGB565_WHITE);
  136   1          system_delay_ms(5);
  137   1          tft180_show_string(0, 3*16, info);
  138   1          system_delay_ms(1000);
  139   1          tft180_clear(RGB565_WHITE);
  140   1              
  141   1      }
  142          //ÇÐ»»Ä£Ê½µÄ³õÊ¼º¯Êý
  143          void Turn_mode_Init(void)
  144          {
  145   1              EA=0;
  146   1              switch(CAR_Mode)
  147   1              {
  148   2                      case STOP:
  149   2                      {
  150   3                              CAR_STOP();
  151   3                              Buzzer_OFF();
  152   3                              ADC_Show_Flag=0;
  153   3                              Key_Flag=1;
  154   3                              Servo_Flag=0;
  155   3                              show_test_info("Test for Stop");
  156   3                              Refesh_arrow();
  157   3                              menu_display_content();
  158   3                              Show_bujin();
  159   3                              CAR_STOP();
  160   3                              GO_PID_Control=0;
  161   3                              GO_PID_Control1=0;
  162   3                              GO_PID_Control2=0;
  163   3                              GO_PID_Control3=0;
  164   3                              break;
  165   3                      }
  166   2                      case GO:
  167   2                      {
  168   3                              ADC_Show_Flag=0;
  169   3      //                      Key_Flag=0;
  170   3                              Key_Flag=1;
  171   3                              Servo_Flag=1;
  172   3      //                      Servo_Flag=0;
  173   3                              show_test_info("Test for GO");
  174   3                              GO_PID_Control=1;
  175   3                              
  176   3                              PID_Update();
  177   3                              Cycle_Update();
  178   3                              break;
  179   3                      }
  180   2                      case GO_Pararm1:
  181   2                      {
  182   3                              ADC_Show_Flag=0;
  183   3      //                      Key_Flag=0;
  184   3                              Key_Flag=1;
  185   3      //                      Servo_Flag=1;
  186   3                              Servo_Flag=0;
  187   3                              show_test_info("Test for GOP1");
  188   3                              GO_PID_Control1=1;
C251 COMPILER V5.60.0,  function                                                           13/10/25  21:50:55  PAGE 4   

  189   3                              
  190   3                              PID_Update();
  191   3                              Cycle_Update();
  192   3                              break;
  193   3                      }
  194   2                      case GO_Pararm2:
  195   2                      {
  196   3                              ADC_Show_Flag=0;
  197   3                              Key_Flag=0;
  198   3      //                      Key_Flag=1;
  199   3                              Servo_Flag=1;
  200   3                              show_test_info("Test for GOP2");
  201   3                              GO_PID_Control2=1;
  202   3                              
  203   3                              PID_Update();
  204   3                              Cycle_Update();
  205   3                              break;
  206   3                      }
  207   2                      case GO_Pararm3:
  208   2                      {
  209   3                              ADC_Show_Flag=0;
  210   3                              Key_Flag=0;
  211   3      //                      Key_Flag=1;
  212   3                              Servo_Flag=1;
  213   3                              show_test_info("Test for GOP3");
  214   3                              GO_PID_Control3=1;
  215   3                              
  216   3                              
  217   3                              PID_Update();
  218   3                              Cycle_Update();
  219   3                              break;
  220   3                      }
  221   2                      case TEST_PWM:
  222   2                      {
  223   3                              Key_Flag=1;
  224   3                              Servo_Flag=0;
  225   3                              show_test_info("Test for PWM_TEST");
  226   3                              break;
  227   3                      }
  228   2                      case TEST_SERVO:
  229   2                      {
  230   3                              Key_Flag=1;
  231   3                              Servo_Flag=0;
  232   3                              show_test_info("Test for Servo");
  233   3                              break;
  234   3                      }
  235   2                      case ADC_Show:
  236   2                      {
  237   3                              ADC_Show_Flag=1;
  238   3                              Key_Flag=1;
  239   3                              Servo_Flag=0;
  240   3                              show_test_info("Test for ADC_Show");
  241   3                              break;
  242   3                      }
  243   2                      case Seta_Servo:
  244   2                      {
  245   3                              Key_Flag=1;
  246   3                              Servo_Flag=0;
  247   3                              show_test_info("Test for Seta_Servo");
  248   3                              break;
  249   3                      }
  250   2              }
  251   1      //      Motor_Update(0);
  252   1              EA=1;
  253   1      }
  254          
C251 COMPILER V5.60.0,  function                                                           13/10/25  21:50:55  PAGE 5   

  255          void Show_pararm()
  256          {
  257   1              switch(CAR_Mode)
  258   1              {
  259   2                      case STOP:break;
  260   2                      case TEST_PWM:
  261   2                      {
  262   3                              tft180_show_string(0,4*16,"LPW:");  tft180_show_float(5*8,4*16,Test_LPWM,2,2);
  263   3                              tft180_show_string(0,5*16,"RPW:");  tft180_show_float(5*8,5*16,Test_RPWM,2,2);
  264   3                      }break;
  265   2                      case GO:
  266   2                      {
  267   3                              tft180_show_string(0,0*16,"Enc1:");tft180_show_int16(5*8,0*16,encoder_data_dir_1);
  268   3                              tft180_show_string(0,1*16,"Enc2:");tft180_show_int16(5*8,1*16,encoder_data_dir_2);
  269   3                              tft180_show_string(0,2*16,"ML:");tft180_show_int16(5*8,2*16,Motor_Left_pi_control(ML*100));
  270   3                              tft180_show_string(0,3*16,"MR:");tft180_show_int16(5*8,3*16,Motor_Right_pi_control(MR*100));
  271   3      //                      tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  272   3      //                      tft180_show_string(0,4*16,"KP:");  tft180_show_float(5*8,4*16,KP,2,2);
  273   3      //                      tft180_show_string(0,5*16,"KD:");  tft180_show_float(5*8,5*16,KD,2,2);
  274   3      //                      tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,3,0);
  275   3                      }break;
  276   2                      case TEST_SERVO:break;
  277   2                      case GO_Pararm1:
  278   2                      {
  279   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  280   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  281   3                              tft180_show_string(0,4*16,"KP1:");  tft180_show_float(5*8,4*16,KP1,2,2);
  282   3                              tft180_show_string(0,5*16,"KD1:");  tft180_show_float(5*8,5*16,KD1,2,2);
  283   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  284   3                      }break;
  285   2                      case GO_Pararm2:
  286   2                      {
  287   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  288   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  289   3                              tft180_show_string(0,4*16,"KP2:");  tft180_show_float(5*8,4*16,KP2,2,2);
  290   3                              tft180_show_string(0,5*16,"KD2:");  tft180_show_float(5*8,5*16,KD2,2,2);
  291   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  292   3                      }break;
  293   2                      case GO_Pararm3:
  294   2                      {
  295   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  296   3                              tft180_show_string(0,4*16,"KP3:");  tft180_show_float(5*8,4*16,KP3,2,2);
  297   3                              tft180_show_string(0,5*16,"KD3:");  tft180_show_float(5*8,5*16,KD3,2,2);
  298   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  299   3                      }break;
  300   2                      case ADC_Show:
  301   2                      {
  302   3                              tft180_show_string(0,0*16,"ADC1:");tft180_show_int16(5*8,0*16,ADC_1);
  303   3                              tft180_show_string(0,1*16,"ADC2:");tft180_show_int16(5*8,1*16,ADC_2);
  304   3                              tft180_show_string(0,2*16,"ADC3:");tft180_show_int16(5*8,2*16,ADC_3);
  305   3                              tft180_show_string(0,3*16,"ADC4:");tft180_show_int16(5*8,3*16,ADC_4);
  306   3      //                      tft180_show_string(0,4*16,"Help");tft180_show_int16(5*8,4*16,Help_turn());
  307   3      //                      tft180_show_int16(5*8,5*16,encoder_data_dir_1);
  308   3      //                      tft180_show_int16(5*8,6*16,encoder_data_dir_2);
  309   3                      }break;
  310   2                      case Seta_Servo:
  311   2                      {
  312   3                              tft180_show_string(0,0*16,"Value:");tft180_show_int16(5*8,0*16,S_Value);
  313   3                      }break;
  314   2              }
  315   1      
  316   1      }
  317          //void SET_Time()
  318          //{
  319          //      if(Set_T>Time && CAR_Mode!=STOP)
  320          //      {
C251 COMPILER V5.60.0,  function                                                           13/10/25  21:50:55  PAGE 6   

  321          //              CAR_Mode=STOP;
  322          //              Turn_mode_Init();
  323          //      }
  324          //}
  325          
  326          void GO_Function(void)
  327          {
  328   1              if(Init_Flag==1)
  329   1              {
  330   2                      Turn_mode_Init();
  331   2                      Init_Flag=0;
  332   2              }
  333   1      }
  334          
  335          void  enconder_init(void)
  336          {
  337   1              encoder_dir_init(ENCODER_DIR_1, ENCODER_DIR_DIR_1, ENCODER_DIR_PULSE_1);        // ³õÊ¼»¯±àÂëÆ÷Ä£¿éÓëÒý½Å
             - ´ø·½ÏòÔöÁ¿±àÂëÆ÷Ä£Ê½
  338   1          encoder_dir_init(ENCODER_DIR_2, ENCODER_DIR_DIR_2, ENCODER_DIR_PULSE_2);    // ³õÊ¼»¯±àÂëÆ÷Ä£¿éÓëÒý½Å
             - ´ø·½ÏòÔöÁ¿±àÂëÆ÷Ä£Ê½
  339   1       }
  340          void speed_control_ring(void)
  341          {
  342   1              encoder_data_dir_1 = - encoder_get_count(ENCODER_DIR_1);                  // »ñÈ¡±àÂëÆ÷¼ÆÊý
  343   1              encoder_data_dir_2 = encoder_get_count(ENCODER_DIR_2);                       // »ñÈ¡±àÂëÆ÷¼ÆÊý
  344   1              encoder_clear_count(ENCODER_DIR_1);                                             // Çå¿Õ±àÂëÆ÷¼ÆÊý
  345   1              encoder_clear_count(ENCODER_DIR_2);                                             // Çå¿Õ±àÂëÆ÷¼ÆÊý
  346   1      }
  347          
  348          void Speed_Control(void)
  349          {
  350   1              switch(CAR_Mode)
  351   1              {
  352   2                      case GO:
  353   2                      {
  354   3                              if(M_Mod>1)
  355   3                              {
  356   4                              MotorL_SetSpeed(Motor_Left_pi_control(ML*100));
  357   4                              MotorR_SetSpeed(Motor_Right_pi_control(MR*100));
  358   4                              }
  359   3                              break;
  360   3                      }       
  361   2                      case GO_Pararm1:
  362   2                      {
  363   3                              if(M_Mod1>1)
  364   3                              {
  365   4                              MotorL_SetSpeed(Motor_Left_pi_control(ML1*100));
  366   4                              MotorR_SetSpeed(Motor_Right_pi_control(MR1*100));
  367   4                              }
  368   3                              break;
  369   3                      }       
  370   2                      case GO_Pararm2:
  371   2                      {
  372   3                              if(M_Mod2>1)
  373   3                              {
  374   4                              MotorL_SetSpeed(Motor_Left_pi_control(ML2*100));
  375   4                              MotorR_SetSpeed(Motor_Right_pi_control(MR2*100));
  376   4                              }
  377   3                              break;
  378   3                      }       
  379   2                      case GO_Pararm3:
  380   2                      {
  381   3                              if(M_Mod3>1)
  382   3                              {
  383   4                              MotorL_SetSpeed(Motor_Left_pi_control(ML3*100));
  384   4                              MotorR_SetSpeed(Motor_Right_pi_control(MR3*100));
C251 COMPILER V5.60.0,  function                                                           13/10/25  21:50:55  PAGE 7   

  385   4                              }
  386   3                              break;
  387   3                      }               
  388   2                      default:
  389   2                      {
  390   3                              MotorL_SetSpeed(0);
  391   3                              MotorR_SetSpeed(0);
  392   3                              M_left_pid.Last_Out=0;
  393   3                              M_Right_pid.Last_Out=0;
  394   3                              break;
  395   3                      }
  396   2              
  397   2              }
  398   1      }
  399          
  400          void Servo_Control(void)
  401          {
  402   1              if(Enter_Flag_Left)
  403   1              {
  404   2                      if(Mode_Flag<-2)//×óÔ²»·
  405   2                      {
  406   3                              pwm_set_duty(Servo_Pwm,Servo_Mide+turn_Value);
  407   3                      }
  408   2                      else if(Mode_Flag>2)//ÓÒÔ²»·
  409   2                      {
  410   3                              pwm_set_duty(Servo_Pwm,Servo_Mide-turn_Value);
  411   3                      }
  412   2                      else
  413   2                      {
  414   3                              pwm_set_duty(Servo_Pwm,Help_turn2(Servo_Mide+dajiao,Help_Value2,ADC_Falg));
  415   3                      }
  416   2              }
  417   1              else
  418   1              {
  419   2                      pwm_set_duty(Servo_Pwm,Help_turn2(Servo_Mide+dajiao,Help_Value2,ADC_Falg));
  420   2              }
  421   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3394     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       151         18
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       335     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
