C251 COMPILER V5.60.0,  function                                                           01/11/25  17:41:50  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\out_file\function.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\function.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\function.lst) OBJECT(.\out_file\function.obj) 

stmt  level    source

    1          #include "function.h"
    2          int Set_T=0;
    3          int T3=0;
    4          
    5          PID servo_pid;
    6          PID M_left_pid;
    7          PID M_Right_pid;
    8          int dajiao=0;
    9          int Last_dajiao=0;
   10          unsigned char Protect_flag= 0;
   11          unsigned char Servo_Flag=0;
   12          
   13          unsigned char ADC_Show_Flag=0;
   14          unsigned char Key_Flag=1;
   15          unsigned char Init_Fg=0;
   16          unsigned char GO_PID_Control=0;
   17          unsigned char GO_PID_Control1=0;
   18          unsigned char GO_PID_Control2=0;
   19          unsigned char GO_PID_Control3=0;
   20          
   21          int Speed_Mode=0;
   22          
   23          int16 encoder_data_dir_1 = 0;
   24          int16 encoder_data_dir_2 = 0;
   25          /*º¯Êý£º³£¼ûµÄPID¼ÆËã
   26           * ²ÎÊý1£º½á¹¹Ìå±äÁ¿µÄµØÖ·
   27           * ²ÎÊý2£ºµ±Ç°Öµ
   28           * ²ÎÊý3£ºÄ¿±êÖµ
   29           * Àý×Ó£ºNormal_PID(&servo_pid,MID_W-mid,0);//½«servoµÄpid²ÎÊýÉèÖÃÎªÒÔÖÐÏß¼ÓÈ¨ÖµºÍÖÐÏßÖµÖ®²îÉèÖÃÎªÄ¿±êÖµ£
             -º0
   30           */
   31          float Normal_PID(PID *PID,float NowData,float Point)
   32          {
   33   1      
   34   1          PID->LastError=PID->Error;
   35   1          PID->Error = Point - NowData;
   36   1          PID->Out_D=PID->Error- PID->LastError;              //DÏî
   37   1          PID->Out_I+=PID->Error;                             //IÏî
   38   1          PID->Out_P=PID->Error;                              //PÏî
   39   1          return (PID->Kp * PID->Out_P + PID->Ki*PID->Out_I + PID->Kd * PID->Out_D);
   40   1      }
   41          /* º¯Êý£º¹éÒ»»¯º¯Êý
   42           * ²ÎÊý1£ºÎÞ
   43           * ·µ»ØÖµ£ºÎÞ
   44           * Àý×Ó/×÷ÓÃ£º½«¶ÁÈ¡µÄADCÖµÁ¿»¯Îª¾àÀë
   45           */
   46          float unification(void) 
   47          {
   48   1          int16_t left_1  = filtered_adc[0];
   49   1          int16_t left_2  = filtered_adc[1];
   50   1          int16_t right_2 = filtered_adc[2];
   51   1          int16_t right_1 = filtered_adc[3];
   52   1      
   53   1          int32_t he = left_2 + right_2;
   54   1          if (he < 10) return 0.0f;
   55   1          return (fast_sqrt(left_1) - fast_sqrt(right_1)) * (1000.0f / he);
   56   1      }
C251 COMPILER V5.60.0,  function                                                           01/11/25  17:41:50  PAGE 2   

   57          /*¿ìËÙ¿ª·½º¯Êý*/
   58          float fast_sqrt(float number) 
   59          {
   60   1          unsigned long i;
   61   1          float x = number;
   62   1          
   63   1          if (number <= 0.0f) return 0.0f;
   64   1          
   65   1          memcpy(&i, &x, 4);
   66   1          
   67   1          i = 532267893U + (i >> 1);
   68   1          
   69   1          memcpy(&x, &i, 4);
   70   1      
   71   1          x = 0.5f * (x + number / x);
   72   1          return x;
   73   1      }
   74          /*µç»ú³õÊ¼»¯*/
   75          void Motor_Init(void)
   76          {
   77   1      //    pwm_init(Servo_Pwm,50,Servo_Mide);
   78   1          pwm_init(MotorL_pwm2, 17000, 0);
   79   1          pwm_init(MotorL_pwm1, 17000, 0);
   80   1          pwm_init(MotorR_pwm2, 17000, 0);
   81   1          pwm_init(MotorR_pwm1, 17000, 0);
   82   1      }
   83          
   84          
   85          void Servo_Init()
   86          {
   87   1          pwm_init(Servo_Pwm,330,Servo_Mide);
   88   1      }
   89          void CAR_STOP()
   90          {
   91   1              MotorL_SetSpeed(0);
   92   1              MotorR_SetSpeed(0);
   93   1              Ser_Servo_Duty(Servo_Mide);
   94   1      }
   95          
   96          //Í£³µ¼ì²â
   97          void Protect()
   98          {
   99   1              if(CAR_Mode!= STOP)
  100   1              {
  101   2                      if((ADC_1+ADC_2+ADC_3+ADC_4)<Pro )
  102   2                      {
  103   3                              Protect_flag=1;
  104   3                      }
  105   2              }
  106   1      }
  107          /*×Ô¶¨Òå³õÊ¼»¯º¯Êý¿â*/
  108          void init_all()
  109          {
  110   1              EA=0;
  111   1      //      wireless_uart_init();//ÎÞÏß´®¿Ú
  112   1              system_delay_ms(10);
  113   1              Motor_Init();
  114   1              Servo_Init();
  115   1      
  116   1              interrupt_set_priority(INT1_IRQn,1);
  117   1              system_delay_ms(5);
  118   1              Buzzer_Init();
  119   1              Buzzer_OFF();
  120   1              enconder_init();
  121   1              imu963ra_init();//ÍÓÂÝÒÇ
  122   1              
C251 COMPILER V5.60.0,  function                                                           01/11/25  17:41:50  PAGE 3   

  123   1              
  124   1              ADC_GetInit();
  125   1              tft180_init();
  126   1              system_delay_ms(100);
  127   1              tft180_set_color(RGB565_RED,RGB565_WHITE);
  128   1      //      eeprom_read_Num();
  129   1              menu_Init();
  130   1              system_delay_ms(10);
  131   1              
  132   1              pit_ms_init(TIM1_PIT, 5);
  133   1      //      pit_ms_init(TIM2_PIT, 5);
  134   1          EA=1;
  135   1              
  136   1      }
  137          void show_test_info(const char* info) 
  138          {
  139   1          tft180_clear(RGB565_WHITE);
  140   1          system_delay_ms(5);
  141   1          tft180_show_string(0, 3*16, info);
  142   1          system_delay_ms(1000);
  143   1          tft180_clear(RGB565_WHITE);
  144   1              
  145   1      }
  146          //ÇÐ»»Ä£Ê½µÄ³õÊ¼º¯Êý
  147          void Turn_mode_Init(void)
  148          {
  149   1              EA=0;
  150   1              switch(CAR_Mode)
  151   1              {
  152   2                      case STOP:
  153   2                      {
  154   3                              CAR_STOP();
  155   3                              Buzzer_OFF();
  156   3                              ADC_Show_Flag=0;
  157   3                              Key_Flag=1;
  158   3                              
  159   3                              Servo_Flag=0;
  160   3                              show_test_info("Test for Stop");
  161   3                              Refesh_arrow();
  162   3                              menu_display_content();
  163   3                              Show_bujin();
  164   3                              CAR_STOP();
  165   3                              GO_PID_Control=0;
  166   3                              GO_PID_Control1=0;
  167   3                              GO_PID_Control2=0;
  168   3                              GO_PID_Control3=0;
  169   3                              /*****¹ßµ¼²ÎÊý³õÊ¼»¯*****/
  170   3                                              /*¼ÇÂ¼²ÎÊý*/
  171   3                              angle=0;
  172   3                              Inertial_Time=0;
  173   3                              Last_stact=str_data;
  174   3                              Type_road = str_data;
  175   3                              Str_Data=0;
  176   3                              Bend_Data=0;
  177   3                                      /*ËÙ²â²ÎÊý*/
  178   3                              Road_Stat=Long_Str;
  179   3                              State_Data_Str=0;
  180   3                              State_Data_Bend=0;
  181   3                              current_angle_time=0;
  182   3                              Long_road_Time=0;
  183   3                              ACC_Flag=0;
  184   3                              finsh_Flag=0;
  185   3                              angle_buffer1=0;
  186   3                              Show_Init = 1;
  187   3                              break;
  188   3                      }
C251 COMPILER V5.60.0,  function                                                           01/11/25  17:41:50  PAGE 4   

  189   2                      case GO:
  190   2                      {
  191   3                              ADC_Show_Flag=0;
  192   3                              Key_Flag=0;
  193   3      //                      Key_Flag=1;
  194   3                              Speed_Mode=M_Mod;
  195   3                              Servo_Flag=1;
  196   3      //                      Servo_Flag=0;
  197   3                              show_test_info("Test for GO");
  198   3                              GO_PID_Control=1;
  199   3                              
  200   3                              PID_Update();
  201   3                              Cycle_Update();
  202   3                              break;
  203   3                      }
  204   2                      case GO_Pararm1:
  205   2                      {
  206   3                              ADC_Show_Flag=0;
  207   3                              Key_Flag=0;
  208   3      //                      Key_Flag=1;
  209   3                              Speed_Mode=M_Mod1;
  210   3                              Servo_Flag=1;
  211   3      //                      Servo_Flag=0;
  212   3                              show_test_info("Test for GOP1");
  213   3                              GO_PID_Control1=1;
  214   3                              
  215   3                              PID_Update();
  216   3                              Cycle_Update();
  217   3                              break;
  218   3                      }
  219   2                      case GO_Pararm2:
  220   2                      {
  221   3                              ADC_Show_Flag=0;
  222   3                              Key_Flag=0;
  223   3      //                      Key_Flag=1;
  224   3                              Speed_Mode=M_Mod2;
  225   3                              Servo_Flag=1;
  226   3                              show_test_info("Test for GOP2");
  227   3                              GO_PID_Control2=1;
  228   3                              
  229   3                              PID_Update();
  230   3                              Cycle_Update();
  231   3                              break;
  232   3                      }
  233   2                      case GO_Pararm3:
  234   2                      {
  235   3                              ADC_Show_Flag=0;
  236   3                              Key_Flag=0;
  237   3      //                      Key_Flag=1;
  238   3                              Speed_Mode=M_Mod3;
  239   3                              Servo_Flag=1;
  240   3                              show_test_info("Test for GOP3");
  241   3                              GO_PID_Control3=1;
  242   3                              
  243   3                              
  244   3                              PID_Update();
  245   3                              Cycle_Update();
  246   3                              break;
  247   3                      }
  248   2                      case TEST_PWM:
  249   2                      {
  250   3                              Key_Flag=1;
  251   3                              Servo_Flag=0;
  252   3                              show_test_info("Test for PWM_TEST");
  253   3                              break;
  254   3                      }
C251 COMPILER V5.60.0,  function                                                           01/11/25  17:41:50  PAGE 5   

  255   2                      case TEST_SERVO:
  256   2                      {
  257   3                              Key_Flag=1;
  258   3                              Servo_Flag=0;
  259   3                              show_test_info("Test for Servo");
  260   3                              break;
  261   3                      }
  262   2                      case ADC_Show:
  263   2                      {
  264   3                              ADC_Show_Flag=1;
  265   3                              Key_Flag=1;
  266   3                              Servo_Flag=1;
  267   3                              show_test_info("Test for ADC_Show");
  268   3                              break;
  269   3                      }
  270   2                      case Seta_Servo:
  271   2                      {
  272   3                              Key_Flag=1;
  273   3                              Servo_Flag=0;
  274   3                              show_test_info("Test for Seta_Servo");
  275   3                              break;
  276   3                      }
  277   2              }
  278   1      //      Motor_Update(0);
  279   1              EA=1;
  280   1      }
  281          
  282          void Show_pararm()
  283          {
  284   1              switch(CAR_Mode)
  285   1              {
  286   2                      case STOP:break;
  287   2                      case TEST_PWM:
  288   2                      {
  289   3                              tft180_show_string(0,4*16,"LPW:");  tft180_show_float(5*8,4*16,Test_LPWM,2,2);
  290   3                              tft180_show_string(0,5*16,"RPW:");  tft180_show_float(5*8,5*16,Test_RPWM,2,2);
  291   3                      }break;
  292   2                      case GO:
  293   2                      {
  294   3      //                      tft180_show_string(0,0*16,"Enc1:");tft180_show_int16(5*8,0*16,encoder_data_dir_1);
  295   3      //                      tft180_show_string(0,1*16,"Enc2:");tft180_show_int16(5*8,1*16,encoder_data_dir_2);
  296   3      //                      tft180_show_string(0,2*16,"ML:");tft180_show_int16(5*8,2*16,Motor_Left_pi_control(ML*100));
  297   3      //                      tft180_show_string(0,3*16,"MR:");tft180_show_int16(5*8,3*16,Motor_Right_pi_control(MR*100));
  298   3      //                      tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  299   3                              tft180_show_string(0,5*16,"Angl:");tft180_show_int16(5*8,5*16,angle);
  300   3      //                      tft180_show_string(0,4*16,"KP:");  tft180_show_float(5*8,4*16,KP,2,2);
  301   3      //                      tft180_show_string(0,5*16,"KD:");  tft180_show_float(5*8,5*16,KD,2,2);
  302   3      //                      tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,3,0);
  303   3                      }break;
  304   2                      case TEST_SERVO:break;
  305   2                      case GO_Pararm1:
  306   2                      {
  307   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  308   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  309   3                              tft180_show_string(0,4*16,"KP1:");  tft180_show_float(5*8,4*16,KP1,2,2);
  310   3                              tft180_show_string(0,5*16,"KD1:");  tft180_show_float(5*8,5*16,KD1,2,2);
  311   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  312   3                      }break;
  313   2                      case GO_Pararm2:
  314   2                      {
  315   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  316   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  317   3                              tft180_show_string(0,4*16,"KP2:");  tft180_show_float(5*8,4*16,KP2,2,2);
  318   3                              tft180_show_string(0,5*16,"KD2:");  tft180_show_float(5*8,5*16,KD2,2,2);
  319   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  320   3                      }break;
C251 COMPILER V5.60.0,  function                                                           01/11/25  17:41:50  PAGE 6   

  321   2                      case GO_Pararm3:
  322   2                      {
  323   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  324   3                              tft180_show_string(0,4*16,"KP3:");  tft180_show_float(5*8,4*16,KP3,2,2);
  325   3                              tft180_show_string(0,5*16,"KD3:");  tft180_show_float(5*8,5*16,KD3,2,2);
  326   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  327   3                      }break;
  328   2                      case ADC_Show:
  329   2                      {
  330   3                              tft180_show_string(0,0*16,"ADC1:");tft180_show_int16(5*8,0*16,ADC_1);
  331   3                              tft180_show_string(0,1*16,"ADC2:");tft180_show_int16(5*8,1*16,ADC_2);
  332   3                              tft180_show_string(0,2*16,"ADC3:");tft180_show_int16(5*8,2*16,ADC_3);
  333   3                              tft180_show_string(0,3*16,"ADC4:");tft180_show_int16(5*8,3*16,ADC_4);
  334   3                              tft180_show_string(0,4*16,"Enc1:");tft180_show_int16(5*8,4*16,encoder_data_dir_1);
  335   3                              tft180_show_string(0,5*16,"Enc2:");tft180_show_int16(5*8,5*16,encoder_data_dir_2);
  336   3                              tft180_show_string(0,6*16,"Angl:");tft180_show_int16(5*8,6*16,angle);
  337   3      //                      tft180_show_string(0,4*16,"Help");tft180_show_int16(5*8,4*16,Help_turn());
  338   3      //                      tft180_show_int16(5*8,5*16,encoder_data_dir_1);
  339   3      //                      tft180_show_int16(5*8,6*16,encoder_data_dir_2);
  340   3                      }break;
  341   2                      case Seta_Servo:
  342   2                      {
  343   3                              tft180_show_string(0,0*16,"Value:");tft180_show_int16(5*8,0*16,S_Value);
  344   3                      }break;
  345   2              }
  346   1      
  347   1      }
  348          //void SET_Time()
  349          //{
  350          //      if(Set_T>Time && CAR_Mode!=STOP)
  351          //      {
  352          //              CAR_Mode=STOP;
  353          //              Turn_mode_Init();
  354          //      }
  355          //}
  356          
  357          void GO_Function(void)
  358          {
  359   1              if(Init_Flag==1)
  360   1              {
  361   2                      Turn_mode_Init();
  362   2                      Init_Flag=0;
  363   2              }
  364   1      }
  365          
  366          void  enconder_init(void)
  367          {
  368   1              encoder_dir_init(ENCODER_DIR_1, ENCODER_DIR_DIR_1, ENCODER_DIR_PULSE_1);        // ³õÊ¼»¯±àÂëÆ÷Ä£¿éÓëÒý½Å
             - ´ø·½ÏòÔöÁ¿±àÂëÆ÷Ä£Ê½
  369   1          encoder_dir_init(ENCODER_DIR_2, ENCODER_DIR_DIR_2, ENCODER_DIR_PULSE_2);    // ³õÊ¼»¯±àÂëÆ÷Ä£¿éÓëÒý½Å
             - ´ø·½ÏòÔöÁ¿±àÂëÆ÷Ä£Ê½
  370   1       }
  371          void speed_control_ring(void)
  372          {
  373   1              encoder_data_dir_1 = - encoder_get_count(ENCODER_DIR_1);                  // »ñÈ¡±àÂëÆ÷¼ÆÊý
  374   1              encoder_data_dir_2 = encoder_get_count(ENCODER_DIR_2);                       // »ñÈ¡±àÂëÆ÷¼ÆÊý
  375   1              encoder_clear_count(ENCODER_DIR_1);                                             // Çå¿Õ±àÂëÆ÷¼ÆÊý
  376   1              encoder_clear_count(ENCODER_DIR_2);                                             // Çå¿Õ±àÂëÆ÷¼ÆÊý
  377   1      }
  378          
  379          void Speed_Control(void)
  380          {
  381   1              MotorL_SetSpeed(Motor_Left_pi_control(Left_Speed*100));
  382   1              MotorR_SetSpeed(Motor_Right_pi_control(Right_Speed*100));
  383   1      }
  384          
C251 COMPILER V5.60.0,  function                                                           01/11/25  17:41:50  PAGE 7   

  385          void Servo_Control(void)
  386          {
  387   1              if(Enter_Flag_Left)
  388   1              {
  389   2                      if(Mode_Flag<-2)//×óÔ²»·
  390   2                      {
  391   3                              pwm_set_duty(Servo_Pwm,Servo_Mide+turn_Value);
  392   3                      }
  393   2                      else if(Mode_Flag>2)//ÓÒÔ²»·
  394   2                      {
  395   3                              pwm_set_duty(Servo_Pwm,Servo_Mide-turn_Value);
  396   3                      }
  397   2                      else
  398   2                      {
  399   3                              Help_turn2(dajiao,Help_Value,ADC_Falg);
  400   3      //                      pwm_set_duty(Servo_Pwm,Servo_Mide+dajiao);
  401   3                      }
  402   2              }
  403   1              else
  404   1              {
  405   2                      Help_turn2(dajiao,Help_Value,ADC_Falg);
  406   2      //              pwm_set_duty(Servo_Pwm,Servo_Mide+dajiao);
  407   2              }
  408   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3203     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       155         18
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       347     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
