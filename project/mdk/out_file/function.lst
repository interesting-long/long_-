C251 COMPILER V5.60.0,  function                                                           26/09/25  18:06:23  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\out_file\function.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\function.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\function.lst) OBJECT(.\out_file\function.obj) 

stmt  level    source

    1          #include "function.h"
    2          int Set_T;
    3          int PRO_Set_Time;
    4          PID servo_pid;
    5          /*º¯Êý£º³£¼ûµÄPID¼ÆËã
    6           * ²ÎÊý1£º½á¹¹Ìå±äÁ¿µÄµØÖ·
    7           * ²ÎÊý2£ºµ±Ç°Öµ
    8           * ²ÎÊý3£ºÄ¿±êÖµ
    9           * Àý×Ó£ºNormal_PID(&servo_pid,MID_W-mid,0);//½«servoµÄpid²ÎÊýÉèÖÃÎªÒÔÖÐÏß¼ÓÈ¨ÖµºÍÖÐÏßÖµÖ®²îÉèÖÃÎªÄ¿±êÖµ£
             -º0
   10           */
   11          float Normal_PID(PID *PID,float NowData,float Point)
   12          {
   13   1      
   14   1          PID->LastError=PID->Error;
   15   1          PID->Error = Point - NowData;
   16   1          PID->Out_D=PID->Error- PID->LastError;              //DÏî
   17   1          PID->Out_I+=PID->Error;                             //IÏî
   18   1          PID->Out_P=PID->Error;                              //PÏî
   19   1          return (PID->Kp * PID->Out_P + PID->Ki*PID->Out_I + PID->Kd * PID->Out_D);
   20   1      }
   21          /* º¯Êý£º¹éÒ»»¯º¯Êý
   22           * ²ÎÊý1£ºÎÞ
   23           * ·µ»ØÖµ£ºÎÞ
   24           * Àý×Ó/×÷ÓÃ£º½«¶ÁÈ¡µÄADCÖµÁ¿»¯Îª¾àÀë
   25           */
   26          float unification(void) 
   27          {
   28   1          float error_val;
   29   1          float left_1;
   30   1          float left_2;
   31   1          float right_2;
   32   1          float right_1;
   33   1          
   34   1          left_1  = (float)filtered_adc[0];
   35   1          left_2  = (float)filtered_adc[1];
   36   1          right_2 = (float)filtered_adc[2];
   37   1          right_1 = (float)filtered_adc[3];
   38   1          
   39   1          error_val = (fast_sqrt(left_1) - fast_sqrt(right_1)) / (left_2 + right_2);
   40   1          
   41   1          return error_val;
   42   1      }
   43          /*¿ìËÙ¿ª·½º¯Êý*/
   44          float fast_sqrt(float number) 
   45          {
   46   1          unsigned long i;
   47   1          float x = number;
   48   1          
   49   1          if (number <= 0.0f) return 0.0f;
   50   1          
   51   1          memcpy(&i, &x, 4);
   52   1          
   53   1          i = 532267893U + (i >> 1);
   54   1          
   55   1          memcpy(&x, &i, 4);
   56   1      
C251 COMPILER V5.60.0,  function                                                           26/09/25  18:06:23  PAGE 2   

   57   1          x = 0.5f * (x + number / x);
   58   1          return x;
   59   1      }
   60          /*µç»ú³õÊ¼»¯*/
   61          void Motor_Init(void)
   62          {
   63   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   64   1          pwm_init(MotorL_pwm2, 17000, 0);
   65   1          pwm_init(MotorL_pwm1, 17000, 0);
   66   1          pwm_init(MotorR_pwm2, 17000, 0);
   67   1          pwm_init(MotorR_pwm1, 17000, 0);
   68   1      }
   69          
   70          
   71          void Servo_Init()
   72          {
   73   1          system_delay_init();
   74   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   75   1      }
   76          void CAR_STOP()
   77          {
   78   1              MotorL_SetSpeed(0);
   79   1              MotorR_SetSpeed(0);
   80   1              Ser_Servo_Duty(Servo_Mide);
   81   1      }
   82          
   83          //Í£³µ¼ì²â
   84          void Protect()
   85          {
   86   1          if((ADC_1+ADC_2+ADC_3+ADC_4)<PRO)
   87   1              {
   88   2                      PRO_Set_Time++;
   89   2                      if(PRO_Set_Time>200)
   90   2                      {
   91   3                              PRO_Set_Time=0;
   92   3                              CAR_Mode=STOP;
   93   3                              Turn_mode_Init();
   94   3                      }
   95   2              }
   96   1              else
   97   1              {
   98   2                      PRO_Set_Time=0;
   99   2              }
  100   1      }
  101          /*×Ô¶¨Òå³õÊ¼»¯º¯Êý¿â*/
  102          void init_all()
  103          {
  104   1              Motor_Init();
  105   1              Servo_Init();
  106   1              iap_init();
  107   1              ADC_GetInit();
  108   1              tft180_init();
  109   1              tft180_set_color(RGB565_RED,RGB565_WHITE);
  110   1              eeprom_read_Num();
  111   1              menu_Init();
  112   1              pit_ms_init(TIM0_PIT, 20);
  113   1              pit_ms_init(TIM1_PIT, 10);
  114   1      }
  115          
  116          //ÇÐ»»Ä£Ê½µÄ³õÊ¼º¯Êý
  117          void Turn_mode_Init(void)
  118          {
  119   1              CAR_STOP();
  120   1              Set_T=0;
  121   1              switch(CAR_Mode)
  122   1              {
C251 COMPILER V5.60.0,  function                                                           26/09/25  18:06:23  PAGE 3   

  123   2                      case STOP:
  124   2                      {
  125   3                              CAR_STOP();
  126   3                              tft180_clear(RGB565_WHITE);
  127   3                              tft180_show_string(0,3*16,"Test for STOP");
  128   3                              system_delay_ms(1000);
  129   3                              tft180_clear(RGB565_WHITE);
  130   3                              Refesh_arrow();
  131   3                              menu_display_content();
  132   3                      }break;
  133   2                      case GO:
  134   2                      {
  135   3                              tft180_clear(RGB565_WHITE);
  136   3                              tft180_show_string(0,3*16,"Test for GO");
  137   3                              system_delay_ms(1000);
  138   3                              tft180_clear(RGB565_WHITE);
  139   3                              
  140   3                              Motor_Update();
  141   3                              PID_Update();
  142   3                              
  143   3                      }break;
  144   2                      case GO_Pararm1:
  145   2                      {
  146   3                              tft180_clear(RGB565_WHITE);
  147   3                              tft180_show_string(0,3*16,"Test for GOP1");
  148   3                              system_delay_ms(1000);
  149   3                              tft180_clear(RGB565_WHITE);
  150   3                              
  151   3                              Motor_Update();
  152   3                              PID_Update();
  153   3                              
  154   3                      }break;
  155   2                      case GO_Pararm2:
  156   2                      {
  157   3                              tft180_clear(RGB565_WHITE);
  158   3                              tft180_show_string(0,3*16,"Test for GOP2");
  159   3                              system_delay_ms(1000);
  160   3                              tft180_clear(RGB565_WHITE);
  161   3                              
  162   3                              Motor_Update();
  163   3                              PID_Update();
  164   3                              
  165   3                      }break;
  166   2                      case GO_Pararm3:
  167   2                      {
  168   3                              tft180_clear(RGB565_WHITE);
  169   3                              tft180_show_string(0,3*16,"Test for GOP3");
  170   3                              system_delay_ms(1000);
  171   3                              tft180_clear(RGB565_WHITE);
  172   3                              
  173   3                              Motor_Update();
  174   3                              PID_Update();
  175   3                              
  176   3                      }break;
  177   2                      case TEST_PWM:
  178   2                      {
  179   3                              tft180_clear(RGB565_WHITE);
  180   3                              tft180_show_string(0,3*16,"Test for PWM_TEST");
  181   3                              system_delay_ms(1000);
  182   3                      }break;
  183   2                      case TEST_SERVO:
  184   2                      {
  185   3                              tft180_clear(RGB565_WHITE);
  186   3                              tft180_show_string(0,3*16,"Test for Servo");
  187   3                              system_delay_ms(1000);
  188   3                      }break;
C251 COMPILER V5.60.0,  function                                                           26/09/25  18:06:23  PAGE 4   

  189   2                      case ADC_Show:
  190   2                      {
  191   3                              tft180_clear(RGB565_WHITE);
  192   3                              tft180_show_string(0,3*16,"Test for ADC_Show");
  193   3                              system_delay_ms(1000);
  194   3                              tft180_clear(RGB565_WHITE);
  195   3                      }break;
  196   2              }
  197   1              
  198   1      }
  199          
  200          void Show_pararm()
  201          {
  202   1              switch(CAR_Mode)
  203   1              {
  204   2                      case STOP:break;
  205   2                      case TEST_PWM:
  206   2                      {
  207   3                              tft180_show_string(0,4*16,"LPW:");  tft180_show_float(4*8,4*16,Test_LPWM,2,2);
  208   3                              tft180_show_string(0,5*16,"RPW:");  tft180_show_float(4*8,5*16,Test_RPWM,2,2);
  209   3                      }break;
  210   2                      case GO:
  211   2                      {
  212   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,100*abs(uni-last_uni),2,2);
  213   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  214   3                              tft180_show_string(0,4*16,"KP:");  tft180_show_float(3*8,4*16,KP,2,2);
  215   3                              tft180_show_string(0,5*16,"KD:");  tft180_show_float(3*8,5*16,KD,2,2);
  216   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  217   3                      }break;
  218   2                      case TEST_SERVO:break;
  219   2                      case GO_Pararm1:
  220   2                      {
  221   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  222   3                              tft180_show_string(0,4*16,"KP1:");  tft180_show_float(4*8,4*16,KP1,2,2);
  223   3                              tft180_show_string(0,5*16,"KD1:");  tft180_show_float(4*8,5*16,KD1,2,2);
  224   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  225   3                      }break;
  226   2                      case GO_Pararm2:
  227   2                      {
  228   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  229   3                              tft180_show_string(0,4*16,"KP2:");  tft180_show_float(4*8,4*16,KP2,2,2);
  230   3                              tft180_show_string(0,5*16,"KD2:");  tft180_show_float(4*8,5*16,KD2,2,2);
  231   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  232   3                      }break;
  233   2                      case GO_Pararm3:
  234   2                      {
  235   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  236   3                              tft180_show_string(0,4*16,"KP3:");  tft180_show_float(4*8,4*16,KP3,2,2);
  237   3                              tft180_show_string(0,5*16,"KD3:");  tft180_show_float(4*8,5*16,KD3,2,2);
  238   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  239   3                      }break;
  240   2                      case ADC_Show:
  241   2                      {
  242   3                              tft180_show_string(0,0*16,"ADC1:");tft180_show_int16(5*8,0*16,ADC_1);
  243   3                              tft180_show_string(0,1*16,"ADC2:");tft180_show_int16(5*8,1*16,ADC_2);
  244   3                              tft180_show_string(0,2*16,"ADC3:");tft180_show_int16(5*8,2*16,ADC_3);
  245   3                              tft180_show_string(0,3*16,"ADC4:");tft180_show_int16(5*8,3*16,ADC_4);
  246   3                              tft180_show_string(0,4*16,"ADC5:");tft180_show_int16(5*8,4*16,ADC_5);
  247   3                              tft180_show_string(0,5*16,"ADC6:");tft180_show_int16(5*8,5*16,ADC_6);
  248   3                              tft180_show_string(0,6*16,"ADC8:");tft180_show_int16(5*8,6*16,ADC_8);
  249   3                      }break;
  250   2              }
  251   1      
  252   1      }
  253          void SET_Time()
  254          {
C251 COMPILER V5.60.0,  function                                                           26/09/25  18:06:23  PAGE 5   

  255   1              if(CAR_Mode!=STOP && Set_T>Time)
  256   1              {
  257   2                      CAR_Mode=STOP;
  258   2                      Turn_mode_Init();
  259   2              }
  260   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3020     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        48         24
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       225     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
