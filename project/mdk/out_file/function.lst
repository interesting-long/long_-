C251 COMPILER V5.60.0,  function                                                           20/09/25  16:53:41  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\out_file\function.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\function.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\function.lst) OBJECT(.\out_file\function.obj) 

stmt  level    source

    1          #include "function.h"
    2          int Set_T;
    3          PID servo_pid;
    4          /*º¯Êý£º³£¼ûµÄPID¼ÆËã
    5           * ²ÎÊý1£º½á¹¹Ìå±äÁ¿µÄµØÖ·
    6           * ²ÎÊý2£ºµ±Ç°Öµ
    7           * ²ÎÊý3£ºÄ¿±êÖµ
    8           * Àý×Ó£ºNormal_PID(&servo_pid,MID_W-mid,0);//½«servoµÄpid²ÎÊýÉèÖÃÎªÒÔÖÐÏß¼ÓÈ¨ÖµºÍÖÐÏßÖµÖ®²îÉèÖÃÎªÄ¿±êÖµ£
             -º0
    9           */
   10          float Normal_PID(PID *PID,float NowData,float Point)
   11          {
   12   1      
   13   1          PID->LastError=PID->Error;
   14   1          PID->Error = Point - NowData;
   15   1          PID->Out_D=PID->Error- PID->LastError;              //DÏî
   16   1          PID->Out_I+=PID->Error;                             //IÏî
   17   1          PID->Out_P=PID->Error;                              //PÏî
   18   1          return (PID->Kp * PID->Out_P + PID->Ki*PID->Out_I + PID->Kd * PID->Out_D);
   19   1      }
   20          /* º¯Êý£º¹éÒ»»¯º¯Êý
   21           * ²ÎÊý1£ºÎÞ
   22           * ·µ»ØÖµ£ºÎÞ
   23           * Àý×Ó/×÷ÓÃ£º½«¶ÁÈ¡µÄADCÖµÁ¿»¯Îª¾àÀë
   24           */
   25          float unification(void) 
   26          {
   27   1          float error_val;
   28   1          float left_1;
   29   1          float left_2;
   30   1          float right_2;
   31   1          float right_1;
   32   1          
   33   1          left_1  = (float)filtered_adc[0];
   34   1          left_2  = (float)filtered_adc[1];
   35   1          right_2 = (float)filtered_adc[2];
   36   1          right_1 = (float)filtered_adc[3];
   37   1          
   38   1          error_val = (fast_sqrt(left_1) - fast_sqrt(right_1)) / (left_2 + right_2);
   39   1          
   40   1          return error_val;
   41   1      }
   42          /*¿ìËÙ¿ª·½º¯Êý*/
   43          float fast_sqrt(float number) 
   44          {
   45   1          unsigned long i;
   46   1          float x = number;
   47   1          
   48   1          if (number <= 0.0f) return 0.0f;
   49   1          
   50   1          memcpy(&i, &x, 4);
   51   1          
   52   1          i = 532267893U + (i >> 1);
   53   1          
   54   1          memcpy(&x, &i, 4);
   55   1      
   56   1          x = 0.5f * (x + number / x);
C251 COMPILER V5.60.0,  function                                                           20/09/25  16:53:41  PAGE 2   

   57   1          return x;
   58   1      }
   59          /*µç»ú³õÊ¼»¯*/
   60          void Motor_Init(void)
   61          {
   62   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   63   1          pwm_init(MotorL_pwm2, 17000, 0);
   64   1          pwm_init(MotorL_pwm1, 17000, 0);
   65   1          pwm_init(MotorR_pwm2, 17000, 0);
   66   1          pwm_init(MotorR_pwm1, 17000, 0);
   67   1      }
   68          
   69          
   70          void Servo_Init()
   71          {
   72   1              
   73   1          system_delay_init();
   74   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   75   1      }
   76          void CAR_STOP()
   77          {
   78   1              MotorL_SetSpeed(0);
   79   1              MotorR_SetSpeed(0);
   80   1              Ser_Servo_Duty(Servo_Mide);
   81   1      }
   82          
   83          //Í£³µ¼ì²â
   84          void Protect()
   85          {
   86   1          if((ADC_1+ADC_2+ADC_3+ADC_4)<PRO)
   87   1              {
   88   2                      CAR_Mode=STOP;
   89   2                      Turn_mode_Init();
   90   2              }
   91   1      }
   92          /*×Ô¶¨Òå³õÊ¼»¯º¯Êý¿â*/
   93          void init_all()
   94          {
   95   1              Motor_Init();
   96   1              Servo_Init();
   97   1              iap_init();
   98   1              ADC_GetInit();
   99   1              tft180_init();
  100   1              tft180_set_color(RGB565_RED,RGB565_WHITE);
  101   1              eeprom_read_Num();
  102   1              menu_Init();
  103   1              pit_ms_init(TIM0_PIT, 5);
  104   1      //      pit_ms_init(TIM1_PIT, 20);
  105   1      }
  106          
  107          //ÇÐ»»Ä£Ê½µÄ³õÊ¼º¯Êý
  108          void Turn_mode_Init(void)
  109          {
  110   1              CAR_STOP();
  111   1              Set_T=0;
  112   1              switch(CAR_Mode)
  113   1              {
  114   2                      case STOP:
  115   2                      {
  116   3                              CAR_STOP();
  117   3                              tft180_clear(RGB565_WHITE);
  118   3                              tft180_show_string(0,3*16,"Test for STOP");
  119   3                              system_delay_ms(1000);
  120   3                              tft180_clear(RGB565_WHITE);
  121   3                              Refesh_arrow();
  122   3                              menu_display_content();
C251 COMPILER V5.60.0,  function                                                           20/09/25  16:53:41  PAGE 3   

  123   3                      }break;
  124   2                      case GO:
  125   2                      {
  126   3                              tft180_clear(RGB565_WHITE);
  127   3                              tft180_show_string(0,3*16,"Test for GO");
  128   3                              system_delay_ms(1000);
  129   3                              tft180_clear(RGB565_WHITE);
  130   3                              
  131   3                              Motor_Update();
  132   3                              PID_Update();
  133   3                              
  134   3                      }break;
  135   2                      case GO_Pararm1:
  136   2                      {
  137   3                              tft180_clear(RGB565_WHITE);
  138   3                              tft180_show_string(0,3*16,"Test for GOP1");
  139   3                              system_delay_ms(1000);
  140   3                              tft180_clear(RGB565_WHITE);
  141   3                              
  142   3                              Motor_Update();
  143   3                              PID_Update();
  144   3                              
  145   3                      }break;
  146   2                      case GO_Pararm2:
  147   2                      {
  148   3                              tft180_clear(RGB565_WHITE);
  149   3                              tft180_show_string(0,3*16,"Test for GOP2");
  150   3                              system_delay_ms(1000);
  151   3                              tft180_clear(RGB565_WHITE);
  152   3                              
  153   3                              Motor_Update();
  154   3                              PID_Update();
  155   3                              
  156   3                      }break;
  157   2                      case GO_Pararm3:
  158   2                      {
  159   3                              tft180_clear(RGB565_WHITE);
  160   3                              tft180_show_string(0,3*16,"Test for GOP3");
  161   3                              system_delay_ms(1000);
  162   3                              tft180_clear(RGB565_WHITE);
  163   3                              
  164   3                              Motor_Update();
  165   3                              PID_Update();
  166   3                              
  167   3                      }break;
  168   2                      case TEST_LM:
  169   2                      {
  170   3                              tft180_clear(RGB565_WHITE);
  171   3                              tft180_show_string(0,3*16,"Test for Left_motor");
  172   3                              system_delay_ms(1000);
  173   3                      }break;
  174   2                      case TEST_RM:
  175   2                      {
  176   3                              tft180_clear(RGB565_WHITE);
  177   3                              tft180_show_string(0,3*16,"Test for Right_motor");
  178   3                              system_delay_ms(1000);
  179   3                      }break;
  180   2                      case TEST_SERVO:
  181   2                      {
  182   3                              tft180_clear(RGB565_WHITE);
  183   3                              tft180_show_string(0,3*16,"Test for Servo");
  184   3                              system_delay_ms(1000);
  185   3                      }break;
  186   2              }
  187   1              
  188   1      }
C251 COMPILER V5.60.0,  function                                                           20/09/25  16:53:41  PAGE 4   

  189          
  190          void Show_pararm()
  191          {
  192   1              tft180_show_string(0,0*16,"ADC1:");tft180_show_int16(5*8,0*16,ADC_1);
  193   1              tft180_show_string(0,1*16,"ADC2:");tft180_show_int16(5*8,1*16,ADC_2);
  194   1              tft180_show_string(0,2*16,"ADC3:");tft180_show_int16(5*8,2*16,ADC_3);
  195   1              tft180_show_string(0,3*16,"ADC4:");tft180_show_int16(5*8,3*16,ADC_4);
  196   1              tft180_show_string(0,4*16,"KP:");  tft180_show_float(3*8,4*16,KP,2,2);
  197   1              tft180_show_string(0,5*16,"KD:");  tft180_show_float(3*8,5*16,KD,2,2);
  198   1      }
  199          void SET_Time()
  200          {
  201   1              if(CAR_Mode!=STOP && Set_T>Time)
  202   1              {
  203   2                      CAR_Mode=STOP;
  204   2                      Turn_mode_Init();
  205   2              }
  206   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1563     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        46         24
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       156     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
