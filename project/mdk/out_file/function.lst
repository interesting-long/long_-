C251 COMPILER V5.60.0,  function                                                           01/10/25  11:28:50  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\out_file\function.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\function.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\function.lst) OBJECT(.\out_file\function.obj) 

stmt  level    source

    1          #include "function.h"
    2          int Set_T=0;
    3          int T3=0;
    4          int PRO_Set_Time=0;
    5          PID servo_pid;
    6          float dajiao=0;
    7          unsigned char Sevo_Flag=0;
    8          unsigned char Init_Fg=0;
    9          typedef unsigned char           uint8_t         ;
   10          typedef unsigned int            uint16_t        ;
   11          typedef unsigned long int       uint32_t        ;
   12          typedef long int                        int32_t         ;
   13          /*º¯Êý£º³£¼ûµÄPID¼ÆËã
   14           * ²ÎÊý1£º½á¹¹Ìå±äÁ¿µÄµØÖ·
   15           * ²ÎÊý2£ºµ±Ç°Öµ
   16           * ²ÎÊý3£ºÄ¿±êÖµ
   17           * Àý×Ó£ºNormal_PID(&servo_pid,MID_W-mid,0);//½«servoµÄpid²ÎÊýÉèÖÃÎªÒÔÖÐÏß¼ÓÈ¨ÖµºÍÖÐÏßÖµÖ®²îÉèÖÃÎªÄ¿±êÖµ£
             -º0
   18           */
   19          float Normal_PID(PID *PID,float NowData,float Point)
   20          {
   21   1      
   22   1          PID->LastError=PID->Error;
   23   1          PID->Error = Point - NowData;
   24   1          PID->Out_D=PID->Error- PID->LastError;              //DÏî
   25   1          PID->Out_I+=PID->Error;                             //IÏî
   26   1          PID->Out_P=PID->Error;                              //PÏî
   27   1          return (PID->Kp * PID->Out_P + PID->Ki*PID->Out_I + PID->Kd * PID->Out_D);
   28   1      }
   29          /* º¯Êý£º¹éÒ»»¯º¯Êý
   30           * ²ÎÊý1£ºÎÞ
   31           * ·µ»ØÖµ£ºÎÞ
   32           * Àý×Ó/×÷ÓÃ£º½«¶ÁÈ¡µÄADCÖµÁ¿»¯Îª¾àÀë
   33           */
   34          float unification(void) 
   35          {
   36   1              
   37   1          float error_val;
   38   1          uint16_t left_1;
   39   1          uint16_t left_2;
   40   1          uint16_t right_2;
   41   1          uint16_t right_1;
   42   1              int32_t cha;
   43   1              int32_t he;
   44   1              
   45   1          left_1  = filtered_adc[0];
   46   1          left_2  = filtered_adc[1];
   47   1          right_2 = filtered_adc[2];
   48   1          right_1 = filtered_adc[3];
   49   1          if(left_2 + right_2<10)
   50   1              {
   51   2                      return 0;
   52   2              }
   53   1              else 
   54   1              {
   55   2                      cha=(left_1 - right_1)*100;
   56   2                      he=left_2 + right_2;
C251 COMPILER V5.60.0,  function                                                           01/10/25  11:28:50  PAGE 2   

   57   2                      error_val = (float)cha/ (he*fast_sqrt(he));
   58   2      //              error_val = (fast_sqrt(left_1) - fast_sqrt(right_1)) / (left_2 + right_2);
   59   2                      return error_val;
   60   2              }
   61   1      }
   62          /*¿ìËÙ¿ª·½º¯Êý*/
   63          float fast_sqrt(float number) 
   64          {
   65   1          unsigned long i;
   66   1          float x = number;
   67   1          
   68   1          if (number <= 0.0f) return 0.0f;
   69   1          
   70   1          memcpy(&i, &x, 4);
   71   1          
   72   1          i = 532267893U + (i >> 1);
   73   1          
   74   1          memcpy(&x, &i, 4);
   75   1      
   76   1          x = 0.5f * (x + number / x);
   77   1          return x;
   78   1      }
   79          /*µç»ú³õÊ¼»¯*/
   80          void Motor_Init(void)
   81          {
   82   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   83   1          pwm_init(MotorL_pwm2, 17000, 0);
   84   1          pwm_init(MotorL_pwm1, 17000, 0);
   85   1          pwm_init(MotorR_pwm2, 17000, 0);
   86   1          pwm_init(MotorR_pwm1, 17000, 0);
   87   1      }
   88          
   89          
   90          void Servo_Init()
   91          {
   92   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   93   1      }
   94          void CAR_STOP()
   95          {
   96   1              MotorL_SetSpeed(0);
   97   1              MotorR_SetSpeed(0);
   98   1              Ser_Servo_Duty(Servo_Mide);
   99   1      }
  100          
  101          //Í£³µ¼ì²â
  102          void Protect()
  103          {
  104   1          if((ADC_1+ADC_2+ADC_3+ADC_4)<PRO)
  105   1              {
  106   2              CAR_Mode=STOP;
  107   2              Turn_mode_Init();
  108   2              }
  109   1      }
  110          /*×Ô¶¨Òå³õÊ¼»¯º¯Êý¿â*/
  111          void init_all()
  112          {
  113   1              EA=0;
  114   1              iap_init();
  115   1              system_delay_ms(10);
  116   1              Motor_Init();
  117   1              Servo_Init();
  118   1              PT1H = 0;
  119   1          PT0H = 1;
  120   1              system_delay_ms(5);
  121   1              
  122   1              ADC_GetInit();
C251 COMPILER V5.60.0,  function                                                           01/10/25  11:28:50  PAGE 3   

  123   1              tft180_init();
  124   1              system_delay_ms(100);
  125   1              tft180_set_color(RGB565_RED,RGB565_WHITE);
  126   1              eeprom_read_Num();
  127   1              menu_Init();
  128   1              system_delay_ms(10);
  129   1              
  130   1              pit_ms_init(TIM0_PIT, 20);
  131   1              pit_ms_init(TIM1_PIT, 5);
  132   1              system_delay_ms(5);
  133   1          EA=1;
  134   1      }
  135          
  136          //ÇÐ»»Ä£Ê½µÄ³õÊ¼º¯Êý
  137          void Turn_mode_Init(void)
  138          {
  139   1              EA=0;
  140   1              Set_T=0;
  141   1              switch(CAR_Mode)
  142   1              {
  143   2                      case STOP:
  144   2                      {
  145   3                              CAR_STOP();
  146   3                              tft180_clear(RGB565_WHITE);
  147   3                              system_delay_ms(5);
  148   3                              tft180_show_string(0,3*16,"Test for STOP");
  149   3                              system_delay_ms(1000);
  150   3                              tft180_clear(RGB565_WHITE);
  151   3                              Refesh_arrow();
  152   3                              menu_display_content();
  153   3                              Show_bujin();
  154   3                              break;
  155   3                      }
  156   2                      case GO:
  157   2                      {
  158   3                              tft180_clear(RGB565_WHITE);
  159   3                              system_delay_ms(5);
  160   3                              tft180_show_string(0,3*16,"Test for GO");
  161   3                              system_delay_ms(1000);
  162   3                              tft180_clear(RGB565_WHITE);
  163   3                              
  164   3                              
  165   3                              Motor_Update();
  166   3                              PID_Update();
  167   3                              break;
  168   3                      }
  169   2                      case GO_Pararm1:
  170   2                      {
  171   3                              tft180_clear(RGB565_WHITE);
  172   3                              system_delay_ms(5);
  173   3                              tft180_show_string(0,3*16,"Test for GOP1");
  174   3                              system_delay_ms(1000);
  175   3                              tft180_clear(RGB565_WHITE);
  176   3                              
  177   3                              Motor_Update();
  178   3                              PID_Update();
  179   3                              break;
  180   3                      }
  181   2                      case GO_Pararm2:
  182   2                      {
  183   3                              tft180_clear(RGB565_WHITE);
  184   3                              system_delay_ms(5);
  185   3                              tft180_show_string(0,3*16,"Test for GOP2");
  186   3                              system_delay_ms(1000);
  187   3                              tft180_clear(RGB565_WHITE);
  188   3                              
C251 COMPILER V5.60.0,  function                                                           01/10/25  11:28:50  PAGE 4   

  189   3                              Motor_Update();
  190   3                              PID_Update();
  191   3                              break;
  192   3                      }
  193   2                      case GO_Pararm3:
  194   2                      {
  195   3                              tft180_clear(RGB565_WHITE);
  196   3                              system_delay_ms(5);
  197   3                              tft180_show_string(0,3*16,"Test for GOP3");
  198   3                              system_delay_ms(1000);
  199   3                              tft180_clear(RGB565_WHITE);
  200   3                              
  201   3                              Motor_Update();
  202   3                              PID_Update();
  203   3                              break;
  204   3                      }
  205   2                      case TEST_PWM:
  206   2                      {
  207   3                              tft180_clear(RGB565_WHITE);
  208   3                              system_delay_ms(5);
  209   3                              tft180_show_string(0,3*16,"Test for PWM_TEST");
  210   3                              system_delay_ms(1000);
  211   3                              
  212   3                              break;
  213   3                      }
  214   2                      case TEST_SERVO:
  215   2                      {
  216   3                              tft180_clear(RGB565_WHITE);
  217   3                              system_delay_ms(5);
  218   3                              tft180_show_string(0,3*16,"Test for Servo");
  219   3                              system_delay_ms(1000);
  220   3                              break;
  221   3                      }
  222   2                      case ADC_Show:
  223   2                      {
  224   3                              tft180_clear(RGB565_WHITE);
  225   3                              system_delay_ms(5);
  226   3                              tft180_show_string(0,3*16,"Test for ADC_Show");
  227   3                              system_delay_ms(1000);
  228   3                              tft180_clear(RGB565_WHITE);
  229   3                              break;
  230   3                      }
  231   2                      case Seta_Servo:
  232   2                      {
  233   3                              tft180_clear(RGB565_WHITE);
  234   3                              system_delay_ms(5);
  235   3                              tft180_show_string(0,3*16,"Test for Seta_Servo");
  236   3                              system_delay_ms(1000);
  237   3                              tft180_clear(RGB565_WHITE);
  238   3                              break;
  239   3                      }
  240   2              }
  241   1              EA=1;
  242   1      }
  243          
  244          void Show_pararm()
  245          {
  246   1              switch(CAR_Mode)
  247   1              {
  248   2                      case STOP:break;
  249   2                      case TEST_PWM:
  250   2                      {
  251   3                              tft180_show_string(0,4*16,"LPW:");  tft180_show_float(5*8,4*16,Test_LPWM,2,2);
  252   3                              tft180_show_string(0,5*16,"RPW:");  tft180_show_float(5*8,5*16,Test_RPWM,2,2);
  253   3                      }break;
  254   2                      case GO:
C251 COMPILER V5.60.0,  function                                                           01/10/25  11:28:50  PAGE 5   

  255   2                      {
  256   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  257   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  258   3                              tft180_show_string(0,4*16,"KP:");  tft180_show_float(5*8,4*16,KP,2,2);
  259   3                              tft180_show_string(0,5*16,"KD:");  tft180_show_float(5*8,5*16,KD,2,2);
  260   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,3,0);
  261   3                      }break;
  262   2                      case TEST_SERVO:break;
  263   2                      case GO_Pararm1:
  264   2                      {
  265   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  266   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  267   3                              tft180_show_string(0,4*16,"KP1:");  tft180_show_float(5*8,4*16,KP1,2,2);
  268   3                              tft180_show_string(0,5*16,"KD1:");  tft180_show_float(5*8,5*16,KD1,2,2);
  269   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  270   3                      }break;
  271   2                      case GO_Pararm2:
  272   2                      {
  273   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  274   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  275   3                              tft180_show_string(0,4*16,"KP2:");  tft180_show_float(5*8,4*16,KP2,2,2);
  276   3                              tft180_show_string(0,5*16,"KD2:");  tft180_show_float(5*8,5*16,KD2,2,2);
  277   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  278   3                      }break;
  279   2                      case GO_Pararm3:
  280   2                      {
  281   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  282   3                              tft180_show_string(0,4*16,"KP3:");  tft180_show_float(5*8,4*16,KP3,2,2);
  283   3                              tft180_show_string(0,5*16,"KD3:");  tft180_show_float(5*8,5*16,KD3,2,2);
  284   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  285   3                      }break;
  286   2                      case ADC_Show:
  287   2                      {
  288   3                              tft180_show_string(0,0*16,"ADC1:");tft180_show_int16(5*8,0*16,ADC_1);
  289   3                              tft180_show_string(0,1*16,"ADC2:");tft180_show_int16(5*8,1*16,ADC_2);
  290   3                              tft180_show_string(0,2*16,"ADC3:");tft180_show_int16(5*8,2*16,ADC_3);
  291   3                              tft180_show_string(0,3*16,"ADC4:");tft180_show_int16(5*8,3*16,ADC_4);
  292   3                      }break;
  293   2                      case Seta_Servo:
  294   2                      {
  295   3                              tft180_show_string(0,0*16,"Value:");tft180_show_int16(5*8,0*16,S_Value);
  296   3                      }break;
  297   2              }
  298   1      
  299   1      }
  300          void SET_Time()
  301          {
  302   1              if(Set_T>Time && CAR_Mode!=STOP)
  303   1              {
  304   2                      CAR_Mode=STOP;
  305   2                      Turn_mode_Init();
  306   2              }
  307   1      }
  308          
  309          void GO_Function(void)
  310          {
  311   1              if(Init_Flag==1)
  312   1              {
  313   2                      Turn_mode_Init();
  314   2                      Init_Flag=0;
  315   2              }
  316   1              else
  317   1              {
  318   2                      SET_Time();
  319   2                      Protect();
  320   2              }
C251 COMPILER V5.60.0,  function                                                           01/10/25  11:28:50  PAGE 6   

  321   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3082     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        56         16
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       276     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
