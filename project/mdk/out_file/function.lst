C251 COMPILER V5.60.0,  function                                                           24/10/25  20:12:29  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\out_file\function.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\function.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\function.lst) OBJECT(.\out_file\function.obj) 

stmt  level    source

    1          #include "function.h"
    2          int Set_T=0;
    3          int T3=0;
    4          
    5          PID servo_pid;
    6          PID M_left_pid;
    7          PID M_Right_pid;
    8          int dajiao=0;
    9          unsigned char Protect_flag= 0;
   10          unsigned char Servo_Flag=0;
   11          
   12          unsigned char ADC_Show_Flag=0;
   13          unsigned char Key_Flag=1;
   14          unsigned char Init_Fg=0;
   15          unsigned char GO_PID_Control=0;
   16          unsigned char GO_PID_Control1=0;
   17          unsigned char GO_PID_Control2=0;
   18          unsigned char GO_PID_Control3=0;
   19          
   20          int Speed_Mode=0;
   21          
   22          int16 encoder_data_dir_1 = 0;
   23          int16 encoder_data_dir_2 = 0;
   24          /*º¯Êý£º³£¼ûµÄPID¼ÆËã
   25           * ²ÎÊý1£º½á¹¹Ìå±äÁ¿µÄµØÖ·
   26           * ²ÎÊý2£ºµ±Ç°Öµ
   27           * ²ÎÊý3£ºÄ¿±êÖµ
   28           * Àý×Ó£ºNormal_PID(&servo_pid,MID_W-mid,0);//½«servoµÄpid²ÎÊýÉèÖÃÎªÒÔÖÐÏß¼ÓÈ¨ÖµºÍÖÐÏßÖµÖ®²îÉèÖÃÎªÄ¿±êÖµ£
             -º0
   29           */
   30          float Normal_PID(PID *PID,float NowData,float Point)
   31          {
   32   1      
   33   1          PID->LastError=PID->Error;
   34   1          PID->Error = Point - NowData;
   35   1          PID->Out_D=PID->Error- PID->LastError;              //DÏî
   36   1          PID->Out_I+=PID->Error;                             //IÏî
   37   1          PID->Out_P=PID->Error;                              //PÏî
   38   1          return (PID->Kp * PID->Out_P + PID->Ki*PID->Out_I + PID->Kd * PID->Out_D);
   39   1      }
   40          /* º¯Êý£º¹éÒ»»¯º¯Êý
   41           * ²ÎÊý1£ºÎÞ
   42           * ·µ»ØÖµ£ºÎÞ
   43           * Àý×Ó/×÷ÓÃ£º½«¶ÁÈ¡µÄADCÖµÁ¿»¯Îª¾àÀë
   44           */
   45          float unification(void) 
   46          {
   47   1          int16_t left_1  = filtered_adc[0];
   48   1          int16_t left_2  = filtered_adc[1];
   49   1          int16_t right_2 = filtered_adc[2];
   50   1          int16_t right_1 = filtered_adc[3];
   51   1      
   52   1          int32_t he = left_2 + right_2;
   53   1          if (he < 10) return 0.0f;
   54   1          return (fast_sqrt(left_1) - fast_sqrt(right_1)) * (1000.0f / he);
   55   1      }
   56          /*¿ìËÙ¿ª·½º¯Êý*/
C251 COMPILER V5.60.0,  function                                                           24/10/25  20:12:29  PAGE 2   

   57          float fast_sqrt(float number) 
   58          {
   59   1          unsigned long i;
   60   1          float x = number;
   61   1          
   62   1          if (number <= 0.0f) return 0.0f;
   63   1          
   64   1          memcpy(&i, &x, 4);
   65   1          
   66   1          i = 532267893U + (i >> 1);
   67   1          
   68   1          memcpy(&x, &i, 4);
   69   1      
   70   1          x = 0.5f * (x + number / x);
   71   1          return x;
   72   1      }
   73          /*µç»ú³õÊ¼»¯*/
   74          void Motor_Init(void)
   75          {
   76   1      //    pwm_init(Servo_Pwm,50,Servo_Mide);
   77   1          pwm_init(MotorL_pwm2, 17000, 0);
   78   1          pwm_init(MotorL_pwm1, 17000, 0);
   79   1          pwm_init(MotorR_pwm2, 17000, 0);
   80   1          pwm_init(MotorR_pwm1, 17000, 0);
   81   1      }
   82          
   83          
   84          void Servo_Init()
   85          {
   86   1          pwm_init(Servo_Pwm,330,Servo_Mide);
   87   1      }
   88          void CAR_STOP()
   89          {
   90   1              MotorL_SetSpeed(0);
   91   1              MotorR_SetSpeed(0);
   92   1              Ser_Servo_Duty(Servo_Mide);
   93   1      }
   94          
   95          //Í£³µ¼ì²â
   96          void Protect()
   97          {
   98   1              if(CAR_Mode!= STOP)
   99   1              {
  100   2                      if((ADC_1+ADC_2+ADC_3+ADC_4)<Pro )
  101   2                      {
  102   3                              Protect_flag=1;
  103   3                      }
  104   2              }
  105   1      }
  106          /*×Ô¶¨Òå³õÊ¼»¯º¯Êý¿â*/
  107          void init_all()
  108          {
  109   1              EA=0;
  110   1      //      wireless_uart_init();
  111   1              system_delay_ms(10);
  112   1              Motor_Init();
  113   1              Servo_Init();
  114   1      
  115   1              interrupt_set_priority(INT1_IRQn,1);
  116   1              system_delay_ms(5);
  117   1              Buzzer_Init();
  118   1              Buzzer_OFF();
  119   1              enconder_init();
  120   1              imu963ra_init();//ÍÓÂÝÒÇ
  121   1              
  122   1              
C251 COMPILER V5.60.0,  function                                                           24/10/25  20:12:29  PAGE 3   

  123   1              ADC_GetInit();
  124   1              tft180_init();
  125   1              system_delay_ms(100);
  126   1              tft180_set_color(RGB565_RED,RGB565_WHITE);
  127   1      //      eeprom_read_Num();
  128   1              menu_Init();
  129   1              system_delay_ms(10);
  130   1              
  131   1              pit_ms_init(TIM1_PIT, 5);
  132   1      //      pit_ms_init(TIM2_PIT, 5);
  133   1          EA=1;
  134   1              
  135   1      }
  136          void show_test_info(const char* info) 
  137          {
  138   1          tft180_clear(RGB565_WHITE);
  139   1          system_delay_ms(5);
  140   1          tft180_show_string(0, 3*16, info);
  141   1          system_delay_ms(1000);
  142   1          tft180_clear(RGB565_WHITE);
  143   1              
  144   1      }
  145          //ÇÐ»»Ä£Ê½µÄ³õÊ¼º¯Êý
  146          void Turn_mode_Init(void)
  147          {
  148   1              EA=0;
  149   1              switch(CAR_Mode)
  150   1              {
  151   2                      case STOP:
  152   2                      {
  153   3                              CAR_STOP();
  154   3                              Buzzer_OFF();
  155   3                              ADC_Show_Flag=0;
  156   3                              Key_Flag=1;
  157   3                              
  158   3                              Servo_Flag=0;
  159   3                              show_test_info("Test for Stop");
  160   3                              Refesh_arrow();
  161   3                              menu_display_content();
  162   3                              Show_bujin();
  163   3                              CAR_STOP();
  164   3                              GO_PID_Control=0;
  165   3                              GO_PID_Control1=0;
  166   3                              GO_PID_Control2=0;
  167   3                              GO_PID_Control3=0;
  168   3                              break;
  169   3                      }
  170   2                      case GO:
  171   2                      {
  172   3                              ADC_Show_Flag=0;
  173   3                              Key_Flag=0;
  174   3      //                      Key_Flag=1;
  175   3                              Speed_Mode=M_Mod;
  176   3                              Servo_Flag=1;
  177   3      //                      Servo_Flag=0;
  178   3                              show_test_info("Test for GO");
  179   3                              GO_PID_Control=1;
  180   3                              
  181   3                              PID_Update();
  182   3                              Cycle_Update();
  183   3                              break;
  184   3                      }
  185   2                      case GO_Pararm1:
  186   2                      {
  187   3                              ADC_Show_Flag=0;
  188   3                              Key_Flag=0;
C251 COMPILER V5.60.0,  function                                                           24/10/25  20:12:29  PAGE 4   

  189   3      //                      Key_Flag=1;
  190   3                              Speed_Mode=M_Mod1;
  191   3                              Servo_Flag=1;
  192   3      //                      Servo_Flag=0;
  193   3                              show_test_info("Test for GOP1");
  194   3                              GO_PID_Control1=1;
  195   3                              
  196   3                              PID_Update();
  197   3                              Cycle_Update();
  198   3                              break;
  199   3                      }
  200   2                      case GO_Pararm2:
  201   2                      {
  202   3                              ADC_Show_Flag=0;
  203   3                              Key_Flag=0;
  204   3      //                      Key_Flag=1;
  205   3                              Speed_Mode=M_Mod2;
  206   3                              Servo_Flag=1;
  207   3                              show_test_info("Test for GOP2");
  208   3                              GO_PID_Control2=1;
  209   3                              
  210   3                              PID_Update();
  211   3                              Cycle_Update();
  212   3                              break;
  213   3                      }
  214   2                      case GO_Pararm3:
  215   2                      {
  216   3                              ADC_Show_Flag=0;
  217   3                              Key_Flag=0;
  218   3      //                      Key_Flag=1;
  219   3                              Speed_Mode=M_Mod3;
  220   3                              Servo_Flag=1;
  221   3                              show_test_info("Test for GOP3");
  222   3                              GO_PID_Control3=1;
  223   3                              
  224   3                              
  225   3                              PID_Update();
  226   3                              Cycle_Update();
  227   3                              break;
  228   3                      }
  229   2                      case TEST_PWM:
  230   2                      {
  231   3                              Key_Flag=1;
  232   3                              Servo_Flag=0;
  233   3                              show_test_info("Test for PWM_TEST");
  234   3                              break;
  235   3                      }
  236   2                      case TEST_SERVO:
  237   2                      {
  238   3                              Key_Flag=1;
  239   3                              Servo_Flag=0;
  240   3                              show_test_info("Test for Servo");
  241   3                              break;
  242   3                      }
  243   2                      case ADC_Show:
  244   2                      {
  245   3                              ADC_Show_Flag=1;
  246   3                              Key_Flag=1;
  247   3                              Servo_Flag=1;
  248   3                              show_test_info("Test for ADC_Show");
  249   3                              break;
  250   3                      }
  251   2                      case Seta_Servo:
  252   2                      {
  253   3                              Key_Flag=1;
  254   3                              Servo_Flag=0;
C251 COMPILER V5.60.0,  function                                                           24/10/25  20:12:29  PAGE 5   

  255   3                              show_test_info("Test for Seta_Servo");
  256   3                              break;
  257   3                      }
  258   2              }
  259   1      //      Motor_Update(0);
  260   1              EA=1;
  261   1      }
  262          
  263          void Show_pararm()
  264          {
  265   1              switch(CAR_Mode)
  266   1              {
  267   2                      case STOP:break;
  268   2                      case TEST_PWM:
  269   2                      {
  270   3                              tft180_show_string(0,4*16,"LPW:");  tft180_show_float(5*8,4*16,Test_LPWM,2,2);
  271   3                              tft180_show_string(0,5*16,"RPW:");  tft180_show_float(5*8,5*16,Test_RPWM,2,2);
  272   3                      }break;
  273   2                      case GO:
  274   2                      {
  275   3      //                      tft180_show_string(0,0*16,"Enc1:");tft180_show_int16(5*8,0*16,encoder_data_dir_1);
  276   3      //                      tft180_show_string(0,1*16,"Enc2:");tft180_show_int16(5*8,1*16,encoder_data_dir_2);
  277   3      //                      tft180_show_string(0,2*16,"ML:");tft180_show_int16(5*8,2*16,Motor_Left_pi_control(ML*100));
  278   3      //                      tft180_show_string(0,3*16,"MR:");tft180_show_int16(5*8,3*16,Motor_Right_pi_control(MR*100));
  279   3      //                      tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  280   3                              tft180_show_string(0,5*16,"Angl:");tft180_show_int16(5*8,5*16,angle);
  281   3      //                      tft180_show_string(0,4*16,"KP:");  tft180_show_float(5*8,4*16,KP,2,2);
  282   3      //                      tft180_show_string(0,5*16,"KD:");  tft180_show_float(5*8,5*16,KD,2,2);
  283   3      //                      tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,3,0);
  284   3                      }break;
  285   2                      case TEST_SERVO:break;
  286   2                      case GO_Pararm1:
  287   2                      {
  288   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  289   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  290   3                              tft180_show_string(0,4*16,"KP1:");  tft180_show_float(5*8,4*16,KP1,2,2);
  291   3                              tft180_show_string(0,5*16,"KD1:");  tft180_show_float(5*8,5*16,KD1,2,2);
  292   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  293   3                      }break;
  294   2                      case GO_Pararm2:
  295   2                      {
  296   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  297   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  298   3                              tft180_show_string(0,4*16,"KP2:");  tft180_show_float(5*8,4*16,KP2,2,2);
  299   3                              tft180_show_string(0,5*16,"KD2:");  tft180_show_float(5*8,5*16,KD2,2,2);
  300   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  301   3                      }break;
  302   2                      case GO_Pararm3:
  303   2                      {
  304   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,unification(),2,2);
  305   3                              tft180_show_string(0,4*16,"KP3:");  tft180_show_float(5*8,4*16,KP3,2,2);
  306   3                              tft180_show_string(0,5*16,"KD3:");  tft180_show_float(5*8,5*16,KD3,2,2);
  307   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  308   3                      }break;
  309   2                      case ADC_Show:
  310   2                      {
  311   3                              tft180_show_string(0,0*16,"ADC1:");tft180_show_int16(5*8,0*16,ADC_1);
  312   3                              tft180_show_string(0,1*16,"ADC2:");tft180_show_int16(5*8,1*16,ADC_2);
  313   3                              tft180_show_string(0,2*16,"ADC3:");tft180_show_int16(5*8,2*16,ADC_3);
  314   3                              tft180_show_string(0,3*16,"ADC4:");tft180_show_int16(5*8,3*16,ADC_4);
  315   3                              tft180_show_string(0,4*16,"Enc1:");tft180_show_int16(5*8,4*16,encoder_data_dir_1);
  316   3                              tft180_show_string(0,5*16,"Enc2:");tft180_show_int16(5*8,5*16,encoder_data_dir_2);
  317   3                              tft180_show_string(0,6*16,"Angl:");tft180_show_int16(5*8,6*16,angle);
  318   3      //                      tft180_show_string(0,4*16,"Help");tft180_show_int16(5*8,4*16,Help_turn());
  319   3      //                      tft180_show_int16(5*8,5*16,encoder_data_dir_1);
  320   3      //                      tft180_show_int16(5*8,6*16,encoder_data_dir_2);
C251 COMPILER V5.60.0,  function                                                           24/10/25  20:12:29  PAGE 6   

  321   3                      }break;
  322   2                      case Seta_Servo:
  323   2                      {
  324   3                              tft180_show_string(0,0*16,"Value:");tft180_show_int16(5*8,0*16,S_Value);
  325   3                      }break;
  326   2              }
  327   1      
  328   1      }
  329          //void SET_Time()
  330          //{
  331          //      if(Set_T>Time && CAR_Mode!=STOP)
  332          //      {
  333          //              CAR_Mode=STOP;
  334          //              Turn_mode_Init();
  335          //      }
  336          //}
  337          
  338          void GO_Function(void)
  339          {
  340   1              if(Init_Flag==1)
  341   1              {
  342   2                      Turn_mode_Init();
  343   2                      Init_Flag=0;
  344   2              }
  345   1      }
  346          
  347          void  enconder_init(void)
  348          {
  349   1              encoder_dir_init(ENCODER_DIR_1, ENCODER_DIR_DIR_1, ENCODER_DIR_PULSE_1);        // ³õÊ¼»¯±àÂëÆ÷Ä£¿éÓëÒý½Å
             - ´ø·½ÏòÔöÁ¿±àÂëÆ÷Ä£Ê½
  350   1          encoder_dir_init(ENCODER_DIR_2, ENCODER_DIR_DIR_2, ENCODER_DIR_PULSE_2);    // ³õÊ¼»¯±àÂëÆ÷Ä£¿éÓëÒý½Å
             - ´ø·½ÏòÔöÁ¿±àÂëÆ÷Ä£Ê½
  351   1       }
  352          void speed_control_ring(void)
  353          {
  354   1              encoder_data_dir_1 = - encoder_get_count(ENCODER_DIR_1);                  // »ñÈ¡±àÂëÆ÷¼ÆÊý
  355   1              encoder_data_dir_2 = encoder_get_count(ENCODER_DIR_2);                       // »ñÈ¡±àÂëÆ÷¼ÆÊý
  356   1              encoder_clear_count(ENCODER_DIR_1);                                             // Çå¿Õ±àÂëÆ÷¼ÆÊý
  357   1              encoder_clear_count(ENCODER_DIR_2);                                             // Çå¿Õ±àÂëÆ÷¼ÆÊý
  358   1      }
  359          
  360          void Speed_Control(void)
  361          {
  362   1              MotorL_SetSpeed(Motor_Left_pi_control(Left_Speed*100));
  363   1              MotorR_SetSpeed(Motor_Right_pi_control(Right_Speed*100));
  364   1      }
  365          
  366          void Servo_Control(void)
  367          {
  368   1              if(Enter_Flag_Left)
  369   1              {
  370   2                      if(Mode_Flag<-2)//×óÔ²»·
  371   2                      {
  372   3                              pwm_set_duty(Servo_Pwm,Servo_Mide+turn_Value);
  373   3                      }
  374   2                      else if(Mode_Flag>2)//ÓÒÔ²»·
  375   2                      {
  376   3                              pwm_set_duty(Servo_Pwm,Servo_Mide-turn_Value);
  377   3                      }
  378   2                      else
  379   2                      {
  380   3                              Help_turn2(dajiao,Help_Value,ADC_Falg);
  381   3      //                      pwm_set_duty(Servo_Pwm,Servo_Mide+dajiao);
  382   3                      }
  383   2              }
  384   1              else
C251 COMPILER V5.60.0,  function                                                           24/10/25  20:12:29  PAGE 7   

  385   1              {
  386   2                      Help_turn2(dajiao,Help_Value,ADC_Falg);
  387   2      //              pwm_set_duty(Servo_Pwm,Servo_Mide+dajiao);
  388   2              }
  389   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3041     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =       153         18
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       340     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
