C251 COMPILER V5.60.0,  function                                                           29/09/25  10:56:59  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE function
OBJECT MODULE PLACED IN .\out_file\function.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\function.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\function.lst) OBJECT(.\out_file\function.obj) 

stmt  level    source

    1          #include "function.h"
    2          int Set_T=0;
    3          int T3=0;
    4          int PRO_Set_Time=0;
    5          PID servo_pid;
    6          float dajiao=0;
    7          unsigned char Sevo_Flag=0;
    8          unsigned char Init_Fg=0;
    9          unsigned char Show_Fg=0;
   10          /*º¯Êý£º³£¼ûµÄPID¼ÆËã
   11           * ²ÎÊý1£º½á¹¹Ìå±äÁ¿µÄµØÖ·
   12           * ²ÎÊý2£ºµ±Ç°Öµ
   13           * ²ÎÊý3£ºÄ¿±êÖµ
   14           * Àý×Ó£ºNormal_PID(&servo_pid,MID_W-mid,0);//½«servoµÄpid²ÎÊýÉèÖÃÎªÒÔÖÐÏß¼ÓÈ¨ÖµºÍÖÐÏßÖµÖ®²îÉèÖÃÎªÄ¿±êÖµ£
             -º0
   15           */
   16          float Normal_PID(PID *PID,float NowData,float Point)
   17          {
   18   1      
   19   1          PID->LastError=PID->Error;
   20   1          PID->Error = Point - NowData;
   21   1          PID->Out_D=PID->Error- PID->LastError;              //DÏî
   22   1          PID->Out_I+=PID->Error;                             //IÏî
   23   1          PID->Out_P=PID->Error;                              //PÏî
   24   1          return (PID->Kp * PID->Out_P + PID->Ki*PID->Out_I + PID->Kd * PID->Out_D);
   25   1      }
   26          /* º¯Êý£º¹éÒ»»¯º¯Êý
   27           * ²ÎÊý1£ºÎÞ
   28           * ·µ»ØÖµ£ºÎÞ
   29           * Àý×Ó/×÷ÓÃ£º½«¶ÁÈ¡µÄADCÖµÁ¿»¯Îª¾àÀë
   30           */
   31          float unification(void) 
   32          {
   33   1              
   34   1          float error_val;
   35   1          float left_1;
   36   1          float left_2;
   37   1          float right_2;
   38   1          float right_1;
   39   1      
   40   1          left_1  = (float)filtered_adc[0];
   41   1          left_2  = (float)filtered_adc[1];
   42   1          right_2 = (float)filtered_adc[2];
   43   1          right_1 = (float)filtered_adc[3];
   44   1          if(left_2 + right_2<=2)
   45   1              {
   46   2                      return 0;
   47   2              }
   48   1              else
   49   1              {
   50   2                      error_val = (left_1 - right_1) / ((left_2 + right_2)*fast_sqrt(left_2 + right_2));
   51   2                      return error_val;
   52   2              }
   53   1      }
   54          /*¿ìËÙ¿ª·½º¯Êý*/
   55          float fast_sqrt(float number) 
   56          {
C251 COMPILER V5.60.0,  function                                                           29/09/25  10:56:59  PAGE 2   

   57   1          unsigned long i;
   58   1          float x = number;
   59   1          
   60   1          if (number <= 0.0f) return 0.0f;
   61   1          
   62   1          memcpy(&i, &x, 4);
   63   1          
   64   1          i = 532267893U + (i >> 1);
   65   1          
   66   1          memcpy(&x, &i, 4);
   67   1      
   68   1          x = 0.5f * (x + number / x);
   69   1          return x;
   70   1      }
   71          /*µç»ú³õÊ¼»¯*/
   72          void Motor_Init(void)
   73          {
   74   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   75   1          pwm_init(MotorL_pwm2, 17000, 0);
   76   1          pwm_init(MotorL_pwm1, 17000, 0);
   77   1          pwm_init(MotorR_pwm2, 17000, 0);
   78   1          pwm_init(MotorR_pwm1, 17000, 0);
   79   1      }
   80          
   81          
   82          void Servo_Init()
   83          {
   84   1          pwm_init(Servo_Pwm,50,Servo_Mide);
   85   1      }
   86          void CAR_STOP()
   87          {
   88   1              MotorL_SetSpeed(0);
   89   1              MotorR_SetSpeed(0);
   90   1              Ser_Servo_Duty(Servo_Mide);
   91   1      }
   92          
   93          //Í£³µ¼ì²â
   94          void Protect()
   95          {
   96   1          if((ADC_1+ADC_2+ADC_3+ADC_4)<PRO)
   97   1              {
   98   2                      PRO_Set_Time++;
   99   2                      if(PRO_Set_Time>200)
  100   2                      {
  101   3                              PRO_Set_Time=0;
  102   3                              CAR_Mode=STOP;
  103   3                              Turn_mode_Init();
  104   3                      }
  105   2              }
  106   1              else
  107   1              {
  108   2                      PRO_Set_Time=0;
  109   2              }
  110   1      }
  111          /*×Ô¶¨Òå³õÊ¼»¯º¯Êý¿â*/
  112          void init_all()
  113          {
  114   1              Motor_Init();
  115   1              Servo_Init();
  116   1              iap_init();
  117   1              ADC_GetInit();
  118   1              tft180_init();
  119   1              tft180_set_color(RGB565_RED,RGB565_WHITE);
  120   1              eeprom_read_Num();
  121   1              menu_Init();
  122   1              PT1H = 0;
C251 COMPILER V5.60.0,  function                                                           29/09/25  10:56:59  PAGE 3   

  123   1          PT0H = 1;
  124   1              pit_us_init(TIM0_PIT, 19700);
  125   1              pit_ms_init(TIM1_PIT, 5);
  126   1          
  127   1      }
  128          
  129          //ÇÐ»»Ä£Ê½µÄ³õÊ¼º¯Êý
  130          void Turn_mode_Init(void)
  131          {
  132   1              EA=0;
  133   1              Set_T=0;
  134   1              switch(CAR_Mode)
  135   1              {
  136   2                      case STOP:
  137   2                      {
  138   3                              CAR_STOP();
  139   3                              Show_Fg=0;
  140   3                              tft180_clear(RGB565_WHITE);
  141   3                              system_delay_ms(5);
  142   3                              tft180_show_string(0,3*16,"Test for STOP");
  143   3                              system_delay_ms(1000);
  144   3                              tft180_clear(RGB565_WHITE);
  145   3                              Refesh_arrow();
  146   3                              menu_display_content();
  147   3                              Show_bujin();
  148   3                              break;
  149   3                      }
  150   2                      case GO:
  151   2                      {
  152   3                              tft180_clear(RGB565_WHITE);
  153   3                              system_delay_ms(5);
  154   3                              tft180_show_string(0,3*16,"Test for GO");
  155   3                              system_delay_ms(1000);
  156   3                              tft180_clear(RGB565_WHITE);
  157   3                              
  158   3                              
  159   3                              Motor_Update();
  160   3                              PID_Update();
  161   3                              break;
  162   3                      }
  163   2                      case GO_Pararm1:
  164   2                      {
  165   3                              tft180_clear(RGB565_WHITE);
  166   3                              system_delay_ms(5);
  167   3                              tft180_show_string(0,3*16,"Test for GOP1");
  168   3                              system_delay_ms(1000);
  169   3                              tft180_clear(RGB565_WHITE);
  170   3                              
  171   3                              Motor_Update();
  172   3                              PID_Update();
  173   3                              break;
  174   3                      }
  175   2                      case GO_Pararm2:
  176   2                      {
  177   3                              tft180_clear(RGB565_WHITE);
  178   3                              system_delay_ms(5);
  179   3                              tft180_show_string(0,3*16,"Test for GOP2");
  180   3                              system_delay_ms(1000);
  181   3                              tft180_clear(RGB565_WHITE);
  182   3                              
  183   3                              Motor_Update();
  184   3                              PID_Update();
  185   3                              break;
  186   3                      }
  187   2                      case GO_Pararm3:
  188   2                      {
C251 COMPILER V5.60.0,  function                                                           29/09/25  10:56:59  PAGE 4   

  189   3                              tft180_clear(RGB565_WHITE);
  190   3                              system_delay_ms(5);
  191   3                              tft180_show_string(0,3*16,"Test for GOP3");
  192   3                              system_delay_ms(1000);
  193   3                              tft180_clear(RGB565_WHITE);
  194   3                              
  195   3                              Motor_Update();
  196   3                              PID_Update();
  197   3                              break;
  198   3                      }
  199   2                      case TEST_PWM:
  200   2                      {
  201   3                              tft180_clear(RGB565_WHITE);
  202   3                              system_delay_ms(5);
  203   3                              tft180_show_string(0,3*16,"Test for PWM_TEST");
  204   3                              system_delay_ms(1000);
  205   3                              
  206   3                              break;
  207   3                      }
  208   2                      case TEST_SERVO:
  209   2                      {
  210   3                              tft180_clear(RGB565_WHITE);
  211   3                              system_delay_ms(5);
  212   3                              tft180_show_string(0,3*16,"Test for Servo");
  213   3                              system_delay_ms(1000);
  214   3                              break;
  215   3                      }
  216   2                      case ADC_Show:
  217   2                      {
  218   3                              tft180_clear(RGB565_WHITE);
  219   3                              system_delay_ms(5);
  220   3                              tft180_show_string(0,3*16,"Test for ADC_Show");
  221   3                              system_delay_ms(1000);
  222   3                              tft180_clear(RGB565_WHITE);
  223   3                              break;
  224   3                      }
  225   2                      case Seta_Servo:
  226   2                      {
  227   3                              tft180_clear(RGB565_WHITE);
  228   3                              system_delay_ms(5);
  229   3                              tft180_show_string(0,3*16,"Test for Seta_Servo");
  230   3                              system_delay_ms(1000);
  231   3                              tft180_clear(RGB565_WHITE);
  232   3                              break;
  233   3                      }
  234   2              }
  235   1              EA=1;
  236   1      }
  237          
  238          void Show_pararm()
  239          {
  240   1              switch(CAR_Mode)
  241   1              {
  242   2                      case STOP:break;
  243   2                      case TEST_PWM:
  244   2                      {
  245   3                              tft180_show_string(0,4*16,"LPW:");  tft180_show_float(5*8,4*16,Test_LPWM,2,2);
  246   3                              tft180_show_string(0,5*16,"RPW:");  tft180_show_float(5*8,5*16,Test_RPWM,2,2);
  247   3                      }break;
  248   2                      case GO:
  249   2                      {
  250   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  251   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  252   3                              tft180_show_string(0,4*16,"KP:");  tft180_show_float(5*8,4*16,KP,2,2);
  253   3                              tft180_show_string(0,5*16,"KD:");  tft180_show_float(5*8,5*16,KD,2,2);
  254   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,3,0);
C251 COMPILER V5.60.0,  function                                                           29/09/25  10:56:59  PAGE 5   

  255   3                      }break;
  256   2                      case TEST_SERVO:break;
  257   2                      case GO_Pararm1:
  258   2                      {
  259   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  260   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  261   3                              tft180_show_string(0,4*16,"KP1:");  tft180_show_float(5*8,4*16,KP1,2,2);
  262   3                              tft180_show_string(0,5*16,"KD1:");  tft180_show_float(5*8,5*16,KD1,2,2);
  263   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  264   3                      }break;
  265   2                      case GO_Pararm2:
  266   2                      {
  267   3                              tft180_show_string(0,1*16,"cha:");tft180_show_float(5*8,1*16,dajiao,2,2);
  268   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  269   3                              tft180_show_string(0,4*16,"KP2:");  tft180_show_float(5*8,4*16,KP2,2,2);
  270   3                              tft180_show_string(0,5*16,"KD2:");  tft180_show_float(5*8,5*16,KD2,2,2);
  271   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  272   3                      }break;
  273   2                      case GO_Pararm3:
  274   2                      {
  275   3                              tft180_show_string(0,2*16,"err:");  tft180_show_float(5*8,2*16,uni,2,2);
  276   3                              tft180_show_string(0,4*16,"KP3:");  tft180_show_float(5*8,4*16,KP3,2,2);
  277   3                              tft180_show_string(0,5*16,"KD3:");  tft180_show_float(5*8,5*16,KD3,2,2);
  278   3                              tft180_show_string(0,3*16,"TIME:");  tft180_show_float(5*8,3*16,Set_T,2,0);
  279   3                      }break;
  280   2                      case ADC_Show:
  281   2                      {
  282   3                              tft180_show_string(0,0*16,"ADC1:");tft180_show_int16(5*8,0*16,ADC_1);
  283   3                              tft180_show_string(0,1*16,"ADC2:");tft180_show_int16(5*8,1*16,ADC_2);
  284   3                              tft180_show_string(0,2*16,"ADC3:");tft180_show_int16(5*8,2*16,ADC_3);
  285   3                              tft180_show_string(0,3*16,"ADC4:");tft180_show_int16(5*8,3*16,ADC_4);
  286   3                              tft180_show_string(0,4*16,"ADC5:");tft180_show_int16(5*8,4*16,ADC_5);
  287   3                              tft180_show_string(0,5*16,"ADC6:");tft180_show_int16(5*8,5*16,ADC_6);
  288   3                              tft180_show_string(0,6*16,"ADC8:");tft180_show_int16(5*8,6*16,ADC_8);
  289   3                      }break;
  290   2                      case Seta_Servo:
  291   2                      {
  292   3                              tft180_show_string(0,0*16,"Value:");tft180_show_int16(5*8,0*16,S_Value);
  293   3                      }break;
  294   2              }
  295   1      
  296   1      }
  297          void SET_Time()
  298          {
  299   1              if(CAR_Mode!=STOP && Set_T>Time)
  300   1              {
  301   2                      CAR_Mode=STOP;
  302   2                      Turn_mode_Init();
  303   2              }
  304   1      }
  305          
  306          void GO_Function(void)
  307          {
  308   1              if(Init_Flag==1)
  309   1              {
  310   2      //              EA=0;
  311   2                      Turn_mode_Init();
  312   2                      Init_Flag=0;
  313   2      //              EA=1;
  314   2              }
  315   1              else
  316   1              {
  317   2                      SET_Time();
  318   2                      Protect();
  319   2              }
  320   1      }
C251 COMPILER V5.60.0,  function                                                           29/09/25  10:56:59  PAGE 6   



Module Information          Static   Overlayable
------------------------------------------------
  code size            =      3312     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        57         24
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       300     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
