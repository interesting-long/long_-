C251 COMPILER V5.60.0,  zf_driver_eeprom                                                   30/10/25  21:44:15  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_driver_eeprom
OBJECT MODULE PLACED IN .\out_file\zf_driver_eeprom.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\..\libraries\zf_driver\zf_driver_eeprom.c LARGE NOALIAS FLOAT64 WARNIN
                    -GLEVEL(3) OPTIMIZE(3,SIZE) BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_devi
                    -ce;..\..\libraries\zf_driver;..\user;..\code) DEBUG PRINT(.\out_file\zf_driver_eeprom.lst) OBJECT(.\out_file\zf_driver_e
                    -eprom.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2          * AI8051U Opensourec Library 即（AI8051U 开源库）是一个基于官方 SDK 接口的第三方开源库
    3          * Copyright (c) 2022 SEEKFREE 逐飞科技
    4          *
    5          * 本文件是STC 开源库的一部分
    6          *
    7          * AI8051U 开源库 是免费软件
    8          * 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
    9          * 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
   10          *
   11          * 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
   12          * 甚至没有隐含的适销性或适合特定用途的保证
   13          * 更多细节请参见 GPL
   14          *
   15          * 您应该在收到本开源库的同时收到一份 GPL 的副本
   16          * 如果没有，请参阅<https://www.gnu.org/licenses/>
   17          *
   18          * 额外注明：
   19          * 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
   20          * 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
   21          * 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
   22          * 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
   23          *
   24          * 文件名称          
   25          * 公司名称          成都逐飞科技有限公司
   26          * 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
   27          * 开发环境          MDK FOR C251
   28          * 适用平台          AI8051U
   29          * 店铺链接          https://seekfree.taobao.com/
   30          *
   31          * 修改记录
   32          * 日期              作者           备注
   33          * 2024-08-01        大W            first version
   34          *********************************************************************************************************
             -***********/
   35          
   36          #include "zf_common_clock.h"
   37          #include "zf_driver_eeprom.h"
   38          #include "zf_driver_delay.h"
   39          
   40          //-------------------------------------------------------------------------------------------------------
             -------------
   41          //  @brief      EEPROM触发操作，
   42          //  @param
   43          //  @return     void
   44          //  Sample usage:                       内部使用用户无需关心
   45          //-------------------------------------------------------------------------------------------------------
             -------------
   46          void eeprom_trig(void)
   47          {
   48   1      
   49   1          IAP_TRIG = 0x5A;
   50   1          IAP_TRIG = 0xA5;                    //先送5AH，再送A5H到IAP触发寄存器，每次都需要如此
   51   1          //送完A5H后，IAP命令立即被触发启动
   52   1          //CPU等待IAP完成后，才会继续执行程序。
C251 COMPILER V5.60.0,  zf_driver_eeprom                                                   30/10/25  21:44:15  PAGE 2   

   53   1          _nop_();   //由于STC32G是多级流水线的指令系统，触发命令后建议加4个NOP，保证IAP_DATA的数据完成准备
   54   1          _nop_();
   55   1          _nop_();
   56   1          _nop_();
   57   1      
   58   1      }
   59          
   60          
   61          //-------------------------------------------------------------------------------------------------------
             -------------
   62          //  @brief      初始化EEPROM
   63          //  @param      NULL
   64          //  @return     void
   65          //  Sample usage:
   66          //-------------------------------------------------------------------------------------------------------
             -------------
   67          void iap_init(void)
   68          {
   69   1          IAP_CONTR = 0x80;           //使能EEPROM操作
   70   1          iap_set_tps();                      //设置擦除等待时间
   71   1      }
   72          
   73          //-------------------------------------------------------------------------------------------------------
             -------------
   74          //  @brief      关闭EEPROM
   75          //  @param      NULL
   76          //  @return     void
   77          //  Sample usage:
   78          //-------------------------------------------------------------------------------------------------------
             -------------
   79          void iap_idle(void)
   80          {
   81   1          IAP_CONTR = 0;                      //失能EEPROM操作
   82   1      }
   83          
   84          
   85          //-------------------------------------------------------------------------------------------------------
             -------------
   86          //  @brief      获取EEPROM操作失败状态位，需要软件清零
   87          //  @param      NULL
   88          //  @return     void
   89          //  Sample usage:
   90          //                                                              操作失败返回1;
   91          //-------------------------------------------------------------------------------------------------------
             -------------
   92          uint8 iap_get_cmd_state(void)
   93          {
   94   1          return ((IAP_CONTR & 0x01) == 0x01);
   95   1      }
   96          
   97          
   98          //-------------------------------------------------------------------------------------------------------
             -------------
   99          //  @brief      设置IAP等待时间
  100          //  @param      NULL
  101          //  @return     void
  102          //  Sample usage:
  103          //-------------------------------------------------------------------------------------------------------
             -------------
  104          void iap_set_tps(void)
  105          {
  106   1          uint8 write_time;
  107   1          write_time = (system_clock / 1000000) ;
  108   1          IAP_TPS = write_time + 1;
  109   1      }
  110          
C251 COMPILER V5.60.0,  zf_driver_eeprom                                                   30/10/25  21:44:15  PAGE 3   

  111          //-------------------------------------------------------------------------------------------------------
             -------------
  112          // 函数简介     EEPROM读一个字节
  113          // 参数说明     addr            需要读的地址
  114          // 返回参数     uint8           读取到的值
  115          //          
  116          // 使用示例  
  117          //          
  118          //-------------------------------------------------------------------------------------------------------
             -------------
  119          uint8 iap_read_byte(uint32 addr)
  120          {
  121   1              uint8 temp;
  122   1              bit flag = 0;
  123   1              flag = EA;
  124   1              EA = 0;
  125   1              
  126   1          IAP_CMD = 1;                                //设置 IAP 读命令
  127   1      
  128   1              IAP_ADDRL = addr;               //设置 IAP 低地址
  129   1              IAP_ADDRH = addr >> 8;  //设置 IAP 高地址
  130   1              IAP_ADDRE = addr >> 16; //设置 IAP 最高地址
  131   1              eeprom_trig();
  132   1              temp = IAP_DATA;                //读 IAP 数据
  133   1      
  134   1          EA = flag;
  135   1              return temp;
  136   1      }
  137          
  138          //-------------------------------------------------------------------------------------------------------
             -------------
  139          // 函数简介     EEPROM写一个字节
  140          // 参数说明     addr            需要读的地址
  141          // 返回参数     uint8           读取到的值
  142          //          
  143          // 使用示例  
  144          //          
  145          //-------------------------------------------------------------------------------------------------------
             -------------
  146          void iap_write_byte(uint32 addr, uint8 byte)
  147          {
  148   1              bit flag = 0;
  149   1      
  150   1              flag = EA;
  151   1              EA = 0;
  152   1      
  153   1              IAP_CMD = 2;                    // 设置 IAP 写命令
  154   1      
  155   1              IAP_ADDRL = addr;               // 设置 IAP 低地址
  156   1              IAP_ADDRH = addr >> 8;  // 设置 IAP 高地址
  157   1              IAP_ADDRE = addr >> 16; // 设置 IAP 最高地址
  158   1              IAP_DATA = byte;                // 写 IAP 数据
  159   1      
  160   1              eeprom_trig();
  161   1      
  162   1              EA = flag;
  163   1      }
  164                  
  165          //-------------------------------------------------------------------------------------------------------
             -------------
  166          //  @brief      EEPROM读取多个字节
  167          //  @param      addr                    需要读取的eeprom地址
  168          //  @param      *buf                    需要读取的数据地址
  169          //  @param      len                             需要读取的数据长度
  170          //  @return     void
  171          //  Sample usage:               uint8 str[10];
C251 COMPILER V5.60.0,  zf_driver_eeprom                                                   30/10/25  21:44:15  PAGE 4   

  172          //                                                              iap_read_bytes(0x00,str,10);
  173          //                                                              将0x00-0x0A地址中的数据，读取到str中。
  174          //-------------------------------------------------------------------------------------------------------
             -------------
  175          void iap_read_buff(uint32 addr, uint8 *buf, uint16 len)
  176          {
  177   1          while(len--)
  178   1          {
  179   2              *buf++ = iap_read_byte(addr);           //读 IAP 数据
  180   2              addr++;
  181   2          }
  182   1      }
  183          
  184          
  185          //-------------------------------------------------------------------------------------------------------
             -------------
  186          //  @brief      EEPROM写多个字节
  187          //  @param      addr                    需要写的eeprom地址
  188          //  @param      *buf                    需要写的数据地址
  189          //  @param      len                             需要写的数据长度
  190          //  @return     void
  191          //  Sample usage:                       iap_write_bytes(0x00,(uint8 *)"0123456789",10);
  192          //                                                              将"0123456789"写入0x00-0x0A地址中;
  193          //-------------------------------------------------------------------------------------------------------
             -------------
  194          void iap_write_buff(uint32 addr, uint8 *buf, uint16 len)
  195          {
  196   1              while(len--)
  197   1          {
  198   2              iap_write_byte(addr, *buf);             //读 IAP 数据
  199   2              addr++;
  200   2                      buf++;
  201   2          }
  202   1      }
  203          
  204          
  205          
  206          //-------------------------------------------------------------------------------------------------------
             -------------
  207          //  @brief      EEPROM擦除目标地址所在的一页（1扇区/512字节）
  208          //  @param      addr                    需要写的eeprom地址
  209          //  @return     void
  210          //  Sample usage:                       iap_erase_page(0x20);
  211          //                                                              擦除0x00-0x200的数据
  212          //-------------------------------------------------------------------------------------------------------
             -------------
  213          void iap_erase_page(uint32 addr)
  214          {
  215   1              bit flag = 0;
  216   1      
  217   1              flag = EA;
  218   1              EA = 0;
  219   1          IAP_CMD = 3;                                //设置 IAP 擦除命令
  220   1          IAP_ADDRL = addr;                   //设置 IAP 低地址
  221   1          IAP_ADDRH = addr >> 8;      //设置 IAP 高地址
  222   1          IAP_ADDRE = addr >> 16;             //设置 IAP 最高地址
  223   1          eeprom_trig();
  224   1          
  225   1              EA = flag;
  226   1          system_delay_ms(10);                //擦除1扇区(512字节)：约4-6ms
  227   1      }
  228          
  229          
  230          
  231          //-------------------------------------------------------------------------------------------------------
             -------------
C251 COMPILER V5.60.0,  zf_driver_eeprom                                                   30/10/25  21:44:15  PAGE 5   

  232          //  @brief      扩展EEPROM写多个字节(无需擦除)
  233          //  @param      addr                    需要写的eeprom地址
  234          //  @param      *buf                    需要写的数据地址
  235          //  @param      len                             需要写的数据长度
  236          //  @return     void
  237          //  Sample usage:                       extern_iap_write_bytes(0x0000,(uint8 *)"0123456789",10);
  238          //                                                              将"0123456789"写入0x00-0x0A地址中;
  239          //      @note：                                         不要跨扇区使用。
  240          //                                                              addr地址：0-511为一个扇区,512-1023为一个扇区，1024-1535为一个扇区，依次类推。
  241          //-------------------------------------------------------------------------------------------------------
             -------------
  242          void extern_iap_write_buff(uint16 addr, uint8 *buf, uint16 len)
  243          {
  244   1          uint8 temp[512] = {0};
  245   1          uint16 i;
  246   1          
  247   1          for(i = 0; i < 512 ; i++)   temp[i] = 0;                                            //清0
  248   1          
  249   1          iap_read_buff(addr & 0xFE00, temp, 512);                                            //读取
  250   1          
  251   1          for(i = 0; i < len; i++)    temp[(addr & 0x1FF) + i] = buf[i];      //改
  252   1          
  253   1          iap_erase_page(addr);                                                                                       //擦除
  254   1          iap_write_buff(addr & 0xFE00, temp, 512);                                   //写入
  255   1      }
  256          
  257          


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       574     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =    ------        530
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------          3
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       512     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
