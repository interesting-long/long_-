C251 COMPILER V5.60.0,  isr                                                                01/11/25  17:25:12  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE isr
OBJECT MODULE PLACED IN .\out_file\isr.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\user\isr.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE) BROW
                    -SE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driver;..
                    -\user;..\code) DEBUG PRINT(.\out_file\isr.lst) OBJECT(.\out_file\isr.obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2          * AI8051U Opensourec Library 即（AI8051U 开源库）是一个基于官方 SDK 接口的第三方开源库
    3          * Copyright (c) 2022 SEEKFREE 逐飞科技
    4          *
    5          * 本文件是STC 开源库的一部分
    6          *
    7          * AI8051U 开源库 是免费软件
    8          * 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
    9          * 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
   10          *
   11          * 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
   12          * 甚至没有隐含的适销性或适合特定用途的保证
   13          * 更多细节请参见 GPL
   14          *
   15          * 您应该在收到本开源库的同时收到一份 GPL 的副本
   16          * 如果没有，请参阅<https://www.gnu.org/licenses/>
   17          *
   18          * 额外注明：
   19          * 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
   20          * 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
   21          * 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
   22          * 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
   23          *
   24          * 文件名称          
   25          * 公司名称          成都逐飞科技有限公司
   26          * 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
   27          * 开发环境          MDK FOR C251
   28          * 适用平台          AI8051U
   29          * 店铺链接          https://seekfree.taobao.com/
   30          *
   31          * 修改记录
   32          * 日期              作者           备注
   33          * 2024-08-01        大W            first version
   34          *********************************************************************************************************
             -***********/
   35          
   36          #include "zf_common_headfile.h"
   37          
   38          
   39          
   40          void DMA_UART1_IRQHandler (void) interrupt 4
   41          {
   42   1          static vuint8 dwon_count = 0;
   43   1          if (DMA_UR1R_STA & 0x01)            // 接收完成
   44   1          {
   45   2              DMA_UR1R_STA &= ~0x01;          // 清标志位
   46   2              uart_rx_start_buff(UART_1);     // 设置下一次接收，务必保留
   47   2              
   48   2              //程序自动下载
   49   2              if(uart_rx_buff[UART_1][0] == 0x7F)
   50   2              {
   51   3                  if(dwon_count++ > 20)
   52   3                  {
   53   4                      IAP_CONTR = 0x60;
   54   4                  }
   55   3              }
C251 COMPILER V5.60.0,  isr                                                                01/11/25  17:25:12  PAGE 2   

   56   2              else
   57   2              {
   58   3                  dwon_count = 0;
   59   3              }
   60   2              
   61   2              if(uart1_irq_handler != NULL)
   62   2              {
   63   3                  uart1_irq_handler(uart_rx_buff[UART_1][0]);
   64   3              }
   65   2          }
   66   1          
   67   1          if (DMA_UR1R_STA & 0x02)    //数据丢弃
   68   1          {
   69   2              DMA_UR1R_STA &= ~0x02;  //清标志位
   70   2              uart_rx_start_buff(UART_1);     // 设置下一次接收，务必保留
   71   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   72   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   73   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   74   2          }
   75   1      }
   76          
   77          
   78          
   79          void DMA_UART2_IRQHandler (void) interrupt 8
   80          {
   81   1      
   82   1          if (DMA_UR2R_STA & 0x01)            // 接收完成
   83   1          {
   84   2              DMA_UR2R_STA &= ~0x01;          // 清标志位
   85   2              uart_rx_start_buff(UART_2);     // 设置下一次接收，务必保留
   86   2              
   87   2              if(uart2_irq_handler != NULL)
   88   2              {
   89   3                  uart2_irq_handler(uart_rx_buff[UART_2][0]);
   90   3              }
   91   2          }
   92   1          
   93   1          if (DMA_UR2R_STA & 0x02)            //数据丢弃
   94   1          {
   95   2              DMA_UR2R_STA &= ~0x02;          //清标志位
   96   2              uart_rx_start_buff(UART_2);     // 设置下一次接收，务必保留
   97   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   98   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
   99   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  100   2              
  101   2          }
  102   1      }
  103          
  104          void DMA_UART3_IRQHandler (void) interrupt 17
  105          {
  106   1      
  107   1          if (DMA_UR3R_STA & 0x01)            // 接收完成
  108   1          {
  109   2              DMA_UR3R_STA &= ~0x01;          // 清标志位
  110   2              uart_rx_start_buff(UART_3);     // 设置下一次接收，务必保留
  111   2              
  112   2              if(uart3_irq_handler != NULL)
  113   2              {
  114   3              
  115   3                  uart3_irq_handler(uart_rx_buff[UART_3][0]);
  116   3                  
  117   3              }
  118   2          }
  119   1          
  120   1          if (DMA_UR3R_STA & 0x02)            //数据丢弃
  121   1          {
C251 COMPILER V5.60.0,  isr                                                                01/11/25  17:25:12  PAGE 3   

  122   2              DMA_UR3R_STA &= ~0x02;          //清标志位
  123   2              uart_rx_start_buff(UART_3);     // 设置下一次接收，务必保留
  124   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  125   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  126   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  127   2              
  128   2          }
  129   1      }
  130          
  131          void DMA_UART4_IRQHandler (void) interrupt 18
  132          {
  133   1      
  134   1          if (DMA_UR4R_STA & 0x01)            // 接收完成
  135   1          {
  136   2              DMA_UR4R_STA &= ~0x01;          // 清标志位
  137   2              uart_rx_start_buff(UART_4);     // 设置下一次接收，务必保留
  138   2              
  139   2              if(uart4_irq_handler != NULL)
  140   2              {
  141   3                  uart4_irq_handler(uart_rx_buff[UART_4][0]);
  142   3                  
  143   3              }
  144   2          }
  145   1          
  146   1          if (DMA_UR4R_STA & 0x02)    //数据丢弃
  147   1          {
  148   2              DMA_UR4R_STA &= ~0x02;  //清标志位
  149   2              uart_rx_start_buff(UART_4);     // 设置下一次接收，务必保留
  150   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  151   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  152   2              // 如果进入了这个中断，则代表UART的数据在没有取走之前被覆盖!
  153   2              
  154   2          }
  155   1      }
  156          
  157          
  158          void TM0_IRQHandler() interrupt 1
  159          {
  160   1          TIM0_CLEAR_FLAG;
  161   1          
  162   1          if(tim0_irq_handler != NULL)
  163   1          {
  164   2              tim0_irq_handler();
  165   2          }
  166   1      }
  167          void TM1_IRQHandler() interrupt 3
  168          {
  169   1          TIM1_CLEAR_FLAG;
  170   1          
  171   1          if(tim1_irq_handler != NULL)
  172   1          {
  173   2              tim1_irq_handler();
  174   2          }
  175   1      }
  176          void TM2_IRQHandler() interrupt 12
  177          {
  178   1          TIM2_CLEAR_FLAG;
  179   1          
  180   1          if(tim2_irq_handler != NULL)
  181   1          {
  182   2              tim2_irq_handler();
  183   2          }
  184   1      }
  185          void TM3_IRQHandler() interrupt 19
  186          {
  187   1          TIM3_CLEAR_FLAG;
C251 COMPILER V5.60.0,  isr                                                                01/11/25  17:25:12  PAGE 4   

  188   1          
  189   1          if(tim3_irq_handler != NULL)
  190   1          {
  191   2              tim3_irq_handler();
  192   2          }
  193   1      }
  194          
  195          void TM4_IRQHandler() interrupt 20
  196          {
  197   1          TIM4_CLEAR_FLAG;
  198   1          
  199   1          if(tim4_irq_handler != NULL)
  200   1          {
  201   2              tim4_irq_handler();
  202   2          }
  203   1      }
  204          
  205          void TM11_IRQHandler() interrupt 24
  206          {
  207   1          TIM11_CLEAR_FLAG;
  208   1          
  209   1          if(tim11_irq_handler != NULL)
  210   1          {
  211   2              tim11_irq_handler();
  212   2          }
  213   1      }
  214          
  215          
  216          //#define     INT0_VECTOR             0       //0003H
  217          //#define     TMR0_VECTOR             1       //000BH
  218          //#define     INT1_VECTOR             2       //0013H
  219          //#define     TMR1_VECTOR             3       //001BH
  220          //#define     UART1_VECTOR            4       //0023H
  221          //#define     ADC_VECTOR              5       //002BH
  222          //#define     LVD_VECTOR              6       //0033H
  223          //#define     PCA_VECTOR              7       //003BH
  224          //#define     UART2_VECTOR            8       //0043H
  225          //#define     SPI_VECTOR              9       //004BH
  226          //#define     INT2_VECTOR             10      //0053H
  227          //#define     INT3_VECTOR             11      //005BH
  228          //#define     TMR2_VECTOR             12      //0063H
  229          //#define     USER_VECTOR             13      //006BH
  230          //#define     INT4_VECTOR             16      //0083H
  231          //#define     UART3_VECTOR            17      //008BH
  232          //#define     UART4_VECTOR            18      //0093H
  233          //#define     TMR3_VECTOR             19      //009BH
  234          //#define     TMR4_VECTOR             20      //00A3H
  235          //#define     CMP_VECTOR              21      //00ABH
  236          //#define     I2C_VECTOR              24      //00C3H
  237          //#define     USB_VECTOR              25      //00CBH
  238          //#define     PWMA_VECTOR             26      //00D3H
  239          //#define     PWMB_VECTOR             27      //00DBH
  240          
  241          //#define     RTC_VECTOR              36      //0123H
  242          //#define     P0INT_VECTOR            37      //012BH
  243          //#define     P1INT_VECTOR            38      //0133H
  244          //#define     P2INT_VECTOR            39      //013BH
  245          //#define     P3INT_VECTOR            40      //0143H
  246          //#define     P4INT_VECTOR            41      //014BH
  247          //#define     P5INT_VECTOR            42      //0153H
  248          //#define     P6INT_VECTOR            43      //015BH
  249          //#define     P7INT_VECTOR            44      //0163H
  250          //#define     DMA_M2M_VECTOR          47      //017BH
  251          //#define     DMA_ADC_VECTOR          48      //0183H
  252          //#define     DMA_SPI_VECTOR          49      //018BH
  253          //#define     DMA_UR1T_VECTOR         50      //0193H
C251 COMPILER V5.60.0,  isr                                                                01/11/25  17:25:12  PAGE 5   

  254          //#define     DMA_UR1R_VECTOR         51      //019BH
  255          //#define     DMA_UR2T_VECTOR         52      //01A3H
  256          //#define     DMA_UR2R_VECTOR         53      //01ABH
  257          //#define     DMA_UR3T_VECTOR         54      //01B3H
  258          //#define     DMA_UR3R_VECTOR         55      //01BBH
  259          //#define     DMA_UR4T_VECTOR         56      //01C3H
  260          //#define     DMA_UR4R_VECTOR         57      //01CBH
  261          //#define     DMA_LCM_VECTOR          58      //01D3H
  262          //#define     LCM_VECTOR              59      //01DBH
  263          //#define     DMA_I2CT_VECTOR         60      //01E3H
  264          //#define     DMA_I2CR_VECTOR         61      //01EBH
  265          //#define     I2S_VECTOR              62      //01F3H
  266          //#define     DMA_I2ST_VECTOR         63      //01FBH
  267          //#define     DMA_I2SR_VECTOR         64      //0203H
  268          //#define     DMA_QSPI_VECTOR         65      //020BH
  269          //#define     QSPI_VECTOR             66      //0213H
  270          //#define     TMR11_VECTOR            67      //021BH
  271          //#define     DMA_PWMAT_VECTOR        72      //0243H
  272          //#define     DMA_PWMAR_VECTOR        73      //024BH


Module Information          Static   Overlayable
------------------------------------------------
  code size            =       991     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =         1     ------
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =         6     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
