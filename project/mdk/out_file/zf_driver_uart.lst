C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE zf_driver_uart
OBJECT MODULE PLACED IN .\out_file\zf_driver_uart.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\..\libraries\zf_driver\zf_driver_uart.c LARGE NOALIAS FLOAT64 WARNINGL
                    -EVEL(3) OPTIMIZE(3,SIZE) BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device
                    -;..\..\libraries\zf_driver;..\user;..\code) DEBUG PRINT(.\out_file\zf_driver_uart.lst) OBJECT(.\out_file\zf_driver_uart.
                    -obj) 

stmt  level    source

    1          /********************************************************************************************************
             -*************
    2          * AI8051U Opensourec Library 即（AI8051U 开源库）是一个基于官方 SDK 接口的第三方开源库
    3          * Copyright (c) 2022 SEEKFREE 逐飞科技
    4          *
    5          * 本文件是STC 开源库的一部分
    6          *
    7          * AI8051U 开源库 是免费软件
    8          * 您可以根据自由软件基金会发布的 GPL（GNU General Public License，即 GNU通用公共许可证）的条款
    9          * 即 GPL 的第3版（即 GPL3.0）或（您选择的）任何后来的版本，重新发布和/或修改它
   10          *
   11          * 本开源库的发布是希望它能发挥作用，但并未对其作任何的保证
   12          * 甚至没有隐含的适销性或适合特定用途的保证
   13          * 更多细节请参见 GPL
   14          *
   15          * 您应该在收到本开源库的同时收到一份 GPL 的副本
   16          * 如果没有，请参阅<https://www.gnu.org/licenses/>
   17          *
   18          * 额外注明：
   19          * 本开源库使用 GPL3.0 开源许可证协议 以上许可申明为译文版本
   20          * 许可申明英文版在 libraries/doc 文件夹下的 GPL3_permission_statement.txt 文件中
   21          * 许可证副本在 libraries 文件夹下 即该文件夹下的 LICENSE 文件
   22          * 欢迎各位使用并传播本程序 但修改内容时必须保留逐飞科技的版权声明（即本声明）
   23          *
   24          * 文件名称          
   25          * 公司名称          成都逐飞科技有限公司
   26          * 版本信息          查看 libraries/doc 文件夹内 version 文件 版本说明
   27          * 开发环境          MDK FOR C251
   28          * 适用平台          AI8051U
   29          * 店铺链接          https://seekfree.taobao.com/
   30          *
   31          * 修改记录
   32          * 日期              作者           备注
   33          * 2024-08-01        大W            first version
   34          *********************************************************************************************************
             -***********/
   35          
   36          #include "stdlib.h"
   37          #include "zf_common_clock.h"
   38          #include "zf_common_debug.h"
   39          
   40          #include "zf_driver_uart.h"
   41          #include "zf_driver_timer.h"
   42          #include "zf_driver_gpio.h"
   43          
   44          uint8 xdata uart_rx_buff[UART_RESERVE][1] = {0};
   45          
   46          #define DMA_URXT_CFG(uart_n)            (*(unsigned char volatile far *)(0x7efa30 + uart_n*0x10))
   47          #define DMA_URXT_CR(uart_n)             (*(unsigned char volatile far *)(0x7efa31 + uart_n*0x10))
   48          #define DMA_URXT_STA(uart_n)            (*(unsigned char volatile far *)(0x7efa32 + uart_n*0x10))
   49          #define DMA_URXT_AMT(uart_n)            (*(unsigned char volatile far *)(0x7efa33 + uart_n*0x10))
   50          #define DMA_URXT_DONE(uart_n)           (*(unsigned char volatile far *)(0x7efa34 + uart_n*0x10))
   51          #define DMA_URXT_TXAH(uart_n)           (*(unsigned char volatile far *)(0x7efa35 + uart_n*0x10))
   52          #define DMA_URXT_TXAL(uart_n)           (*(unsigned char volatile far *)(0x7efa36 + uart_n*0x10))
   53          #define DMA_URXR_CFG(uart_n)            (*(unsigned char volatile far *)(0x7efa38 + uart_n*0x10))
   54          #define DMA_URXR_CR(uart_n)             (*(unsigned char volatile far *)(0x7efa39 + uart_n*0x10))
C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 2   

   55          #define DMA_URXR_STA(uart_n)            (*(unsigned char volatile far *)(0x7efa3a + uart_n*0x10))
   56          #define DMA_URXR_AMT(uart_n)            (*(unsigned char volatile far *)(0x7efa3b + uart_n*0x10))
   57          #define DMA_URXR_DONE(uart_n)           (*(unsigned char volatile far *)(0x7efa3c + uart_n*0x10))
   58          #define DMA_URXR_RXAH(uart_n)           (*(unsigned char volatile far *)(0x7efa3d + uart_n*0x10))
   59          #define DMA_URXR_RXAL(uart_n)           (*(unsigned char volatile far *)(0x7efa3e + uart_n*0x10))
   60          
   61          #define DMA_URXT_AMTH(uart_n)           (*(unsigned char volatile far *)(0x7efa88 + uart_n*0x04))
   62          #define DMA_URXT_DONEH(uart_n)          (*(unsigned char volatile far *)(0x7efa89 + uart_n*0x04))
   63          #define DMA_URXR_AMTH(uart_n)           (*(unsigned char volatile far *)(0x7efa8a + uart_n*0x04))
   64          #define DMA_URXR_DONEH(uart_n)          (*(unsigned char volatile far *)(0x7efa8b + uart_n*0x04))
   65          
   66          
   67          // 该数组禁止修改，内部使用,用户无需关心
   68          static uart_function_enum uart_function_state[4] =
   69          {
   70              UART_FUNCTION_INIT,
   71              UART_FUNCTION_INIT,
   72              UART_FUNCTION_INIT,
   73              UART_FUNCTION_INIT,
   74          };
   75          
   76          //-------------------------------------------------------------------------------------------------------
             -------------
   77          // 函数简介     UART 外设确认功能状态 库内部调用
   78          // 参数说明     index           UART 外设模块号
   79          // 参数说明     mode            需要确的功能模块
   80          // 返回参数     uint8           1-可以使用 0-不可以使用
   81          // 使用示例     zf_assert(uart_funciton_check(UART_2, UART_FUNCTION_UART));
   82          //-------------------------------------------------------------------------------------------------------
             -------------
   83          uint8 uart_funciton_check (uart_index_enum index, uart_function_enum mode)
   84          {
   85   1          uint8 return_state = 1;
   86   1          if(UART_FUNCTION_INIT == uart_function_state[index])
   87   1          {
   88   2              uart_function_state[index] = mode;
   89   2          }
   90   1          else if(uart_function_state[index] == mode)
   91   1          {
   92   2              return_state = 1;
   93   2          }
   94   1          else
   95   1          {
   96   2              return_state = 0;
   97   2          }
   98   1          return return_state;
   99   1      }
  100          //-------------------------------------------------------------------------------------------------------
             -------------
  101          // 函数简介     串口发送数组
  102          // 参数说明     uart_n       串口通道
  103          // 参数说明     buff        要发送的数组地址
  104          // 参数说明     len         数据长度
  105          // 返回参数     void
  106          // 使用示例     uart_write_buffer(UART_1, buff, 10);     //串口1发送10个buff数组。
  107          //-------------------------------------------------------------------------------------------------------
             -------------
  108          void uart_write_buffer(uart_index_enum uart_n, const uint8 *buff, uint16 len)
  109          {
  110   1      
  111   1      //      DMA_URXT_CFG(uart_n)  = 0x00;                   // DMA优先级低
  112   1              DMA_URXT_STA(uart_n) = 0;                               // 清空标志位
  113   1              len = len - 1;
  114   1              DMA_URXT_AMT(uart_n)  = len & 0xff;             // 设置传输总字节数(低8位)：n+1
  115   1              DMA_URXT_AMTH(uart_n) = len >> 8;               // 设置传输总字节数(高8位)：n+1
  116   1              DMA_URXT_TXAH(uart_n) = (uint8)((uint16)buff >> 8);
C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 3   

  117   1              DMA_URXT_TXAL(uart_n) = (uint8)((uint16)buff);
  118   1              DMA_URXT_CR(uart_n) = 0xC0;                     // 使能DMA TX功能
  119   1      
  120   1              while(!(DMA_URXT_STA(uart_n) & 0x01));  // 等待发送完成
  121   1      
  122   1              DMA_URXT_CR(uart_n) = 0x00;                             // 关闭DMA TX
  123   1      
  124   1      }
  125          //-------------------------------------------------------------------------------------------------------
             -------------
  126          // 函数简介     串口发送字符串
  127          // 参数说明     uart_n       串口通道
  128          // 参数说明     str         字符串首地址
  129          // 返回参数     void
  130          // 使用示例     uart_putstr(UART_1, (uint8 *)"12345")   //串口1发送12345这个字符串
  131          //-------------------------------------------------------------------------------------------------------
             -------------
  132          void uart_write_string(uart_index_enum uart_n, const char *str)
  133          {
  134   1              #define BUFF_LEN 256
  135   1              
  136   1          uint16 len = strlen(str);
  137   1              // 因UART_DMA只能操作xdata区域的数据，所以，这里新建一个数组，搬移。
  138   1              uint8 buff[BUFF_LEN];
  139   1      
  140   1              if(len <= BUFF_LEN)
  141   1              {
  142   2                      memcpy(buff, str, len);
  143   2                      uart_write_buffer(uart_n, buff, len);
  144   2              }
  145   1      }
  146          
  147          //-------------------------------------------------------------------------------------------------------
             -------------
  148          // 函数简介     串口发送一个字节
  149          // 参数说明     uart_n       串口通道
  150          // 参数说明     dat         串口数据
  151          // 返回参数     void
  152          // 使用示例     uart_write_byte(UART_1, 0x43);        //串口1发送0x43。
  153          //-------------------------------------------------------------------------------------------------------
             -------------
  154          void uart_write_byte(uart_index_enum uart_n, const uint8 dat)
  155          {
  156   1          uart_write_buffer(uart_n, &dat, 1);
  157   1      }
  158          
  159          //-------------------------------------------------------------------------------------------------------
             -------------
  160          // 函数简介     串口开始接收数据
  161          // 参数说明     uart_n       串口通道
  162          // 返回参数     void
  163          // 使用示例     uart_rx_start_buff(UART_1);
  164          //-------------------------------------------------------------------------------------------------------
             -------------
  165          void uart_rx_start_buff(uart_index_enum uart_n)
  166          {
  167   1          DMA_URXR_AMT(uart_n) = (1 - 1);                                                                             // 设置接收的字节数
  168   1          DMA_URXR_AMTH(uart_n) = (1 - 1) >> 8;                                                               // 设置接收的字节数
  169   1          DMA_URXR_RXAL(uart_n) = (uint8)((uint16)uart_rx_buff[uart_n]);              // 设置接收缓冲地址
  170   1          DMA_URXR_RXAH(uart_n) = (uint8)((uint16)uart_rx_buff[uart_n] >> 8); // 设置接收缓冲地址
  171   1          DMA_URXR_CR(uart_n) = 0xA1;                                                                                 // 开启DMA RX接收中断，开启DMA RX接收，清空FIFO
  172   1      }
  173          
  174          
  175          
  176          //-------------------------------------------------------------------------------------------------------
C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 4   

             -------------
  177          // 函数简介     打开串口接收中断
  178          // 参数说明     uart_n       串口通道
  179          // 参数说明     status      使能或者失能
  180          // 返回参数     void
  181          // 使用示例     uart_rx_irq(UART_1, ENABLE);        //打开串口1接收中断
  182          //-------------------------------------------------------------------------------------------------------
             -------------
  183          void uart_rx_interrupt (uart_index_enum uart_n, uint8 status)
  184          {
  185   1              if(status)
  186   1              {
  187   2                      DMA_URXR_CFG(uart_n) |= 0x80;
  188   2              }
  189   1              else
  190   1              {
  191   2                      DMA_URXR_CFG(uart_n) &= ~0x80;
  192   2              } 
  193   1      }
  194          
  195          //-------------------------------------------------------------------------------------------------------
             -------------
  196          // 函数简介     读取串口接收的数据（whlie等待）
  197          // 参数说明     uart_n           串口模块号(UART_1 - UART_4)
  198          // 参数说明     *dat            接收数据的地址
  199          // 返回参数     void
  200          // 使用示例     dat = uart_read_byte(USART_1);       // 接收串口1数据  存在在dat变量里
  201          //-------------------------------------------------------------------------------------------------------
             -------------
  202          uint8 uart_read_byte(uart_index_enum uart_n)
  203          {
  204   1              uint8 dat;
  205   1              
  206   1              // 等待串口有数据
  207   1              while(!(DMA_URXR_STA(uart_n)&0x03));
  208   1      
  209   1              // 读取数据
  210   1              dat = uart_rx_buff[uart_n][0];
  211   1                      
  212   1              // 清空标志位
  213   1              DMA_URXR_STA(uart_n) = 0x00;
  214   1              
  215   1              // 开始下一次接收
  216   1              uart_rx_start_buff(uart_n);
  217   1              return dat;
  218   1      }
  219          
  220          //-------------------------------------------------------------------------------------------------------
             -------------
  221          // 函数简介     读取串口接收的数据（查询接收）
  222          // 参数说明     uart_n           串口模块号(UART_1 - UART_8)
  223          // 参数说明     *dat            接收数据的地址
  224          // 返回参数     uint8           1：接收成功   0：未接收到数据
  225          // 使用示例     uint8 dat; uart_query_byte(USART_1,&dat);       // 接收串口1数据  存在在dat变量里
  226          //-------------------------------------------------------------------------------------------------------
             -------------
  227          uint8 uart_query_byte(uart_index_enum uart_n, uint8 *dat)
  228          {
  229   1              uint8 ret = 0; 
  230   1      
  231   1              // 读取数据
  232   1              *dat = uart_rx_buff[uart_n][0];
  233   1              
  234   1              if(DMA_URXR_STA(uart_n) & 0x03)
  235   1              {
  236   2                      ret = 1;
C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 5   

  237   2                      
  238   2                      DMA_URXR_STA(uart_n) &= ~0x03;
  239   2              }
  240   1              else
  241   1              {
  242   2                      ret = 0;
  243   2              }
  244   1              
  245   1              // 开始下一次接收
  246   1              uart_rx_start_buff(uart_n);
  247   1      
  248   1              return ret;
  249   1      }
  250          
  251          //-------------------------------------------------------------------------------------------------------
             -------------
  252          // 函数简介     串口DMA初始化
  253          // 参数说明     uart_n       串口通道
  254          // 返回参数     void
  255          // 使用示例     uart_dma_init(UART_1);
  256          //-------------------------------------------------------------------------------------------------------
             -------------
  257          void uart_dma_init(uart_index_enum uart_n)
  258          {
  259   1              DMA_URXT_CFG(uart_n)  = 0x00;   // DMA TX数据访问优先级最低，关闭DMA发送中断，
  260   1              DMA_URXT_STA(uart_n)  = 0x00;   // 清除DMA TX状态
  261   1              DMA_URXT_CR(uart_n)   = 0x00;   // 关闭DMA TX
  262   1                      
  263   1              DMA_URXR_CFG(uart_n)  = 0x00;   // 关闭DMA接收中断
  264   1              DMA_URXR_STA(uart_n)  = 0x00;   // 清除DMA RX状态
  265   1              DMA_URXR_CR(uart_n)   = 0x00;   // 关闭DMA RX
  266   1      
  267   1              DMA_URXR_AMT(uart_n)  = (1 - 1);                                                                        // 设置接收的字节数
  268   1              DMA_URXR_AMTH(uart_n) = (1 - 1)>>8;                                                                     // 设置接收的字节数
  269   1              DMA_URXR_RXAL(uart_n) = (uint8)((uint16)uart_rx_buff[uart_n]);          // 设置接收缓冲地址
  270   1              DMA_URXR_RXAH(uart_n) = (uint8)((uint16)uart_rx_buff[uart_n] >> 8);     // 设置接收缓冲地址
  271   1              DMA_URXR_CFG(uart_n)  = 0x0F;                                                                           // 中断优先级最高，DMA优先级最高
  272   1              DMA_URXR_CR(uart_n)   = 0xA1;                                                                           // 开启DMA RX，清空FIFO
  273   1       
  274   1      }
  275          
  276          //-------------------------------------------------------------------------------------------------------
             -------------
  277          // 函数简介     串口初始化
  278          // 参数说明     uart_n       串口通道
  279          // 参数说明     baud        波特率
  280          // 参数说明     tx_pin      串口发送引脚号
  281          // 参数说明     rx_pin      串口接收引脚号
  282          // 返回参数     void
  283          // 使用示例     uart_init(UART_2, 115200, UART2_TX_P11, UART2_RX_P10); //串口2初始化引脚号,TX为P11,RX为P1
             -0
  284          // 备注信息     所有的串口，都只能使用定时器2 做波特率发生器，所有的串口只能是同一个波特率。
  285          //-------------------------------------------------------------------------------------------------------
             -------------
  286          void uart_init(uart_index_enum uart_n, uint32 baud, uart_pin_enum tx_pin, uart_pin_enum rx_pin)
  287          {
  288   1          uint16 brt;
  289   1          
  290   1              // 如果程序在输出了断言信息 并且提示出错位置在这里
  291   1          // 就去查看你在什么地方调用这个函数 检查你的传入参数
  292   1          // 这里是检查是否有重复使用UART1 和 UART2功能
  293   1          // 比如初始化了 UART1 然后又初始化成 SPI1 这种用法是不允许的
  294   1              // UART1和SPI1使用同一个寄存器，要么用UART1要么使用SPI1,只能是二选一。
  295   1              // UART2和SPI2使用同一个寄存器，要么用UART2要么使用SPI2,只能是二选一。
  296   1          zf_assert(uart_funciton_check(uart_n, UART_FUNCTION_UART));
  297   1              
C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 6   

  298   1                  
  299   1              // 如果程序在输出了断言信息 并且提示出错位置在这里
  300   1          // 就去查看你在什么地方调用这个函数 检查你的传入参数
  301   1          // 这里是检查是否有重复使用定时器
  302   1              // TIM2已经给串口用作波特率发生器了。不能再初始化为其他的。
  303   1              zf_assert(timer_funciton_check(TIM_2, TIMER_FUNCTION_UART));
  304   1              
  305   1              
  306   1              // 串口的RX和TX必须是一组切换，如果在这里进行报错，
  307   1              // 则说明你选到不是同一组的引脚了
  308   1              zf_assert(((tx_pin >> 8) & 0x0f) == ((rx_pin >> 8) & 0x0f));
  309   1              
  310   1              // 初始化GPIO
  311   1              gpio_init(tx_pin&0xFF, GPO, 1, GPO_PUSH_PULL);
  312   1              gpio_init(rx_pin&0xFF, GPI, 1, GPI_FLOATING_IN);
  313   1              
  314   1          brt = (uint16)(65536 - (system_clock / (baud + 2) / 4));
  315   1          
  316   1          switch(uart_n)
  317   1          {
  318   2              case UART_1:
  319   2              {
  320   3                  //            if(TIM_1 == tim_n)
  321   3                  //            {
  322   3                  //                SCON |= 0x50;
  323   3                  //                TMOD |= 0x00;
  324   3                  //                TL1 = brt;
  325   3                  //                TH1 = brt >> 8;
  326   3                  //                AUXR |= 0x40;
  327   3                  //                TR1 = 0;  //关闭发送中断
  328   3                  //
  329   3                  //            }
  330   3                  //            else if(TIM_2 == tim_n)
  331   3                  {
  332   4                      SCON |= 0x50;
  333   4                      T2L = brt;
  334   4                      T2H = brt >> 8;
  335   4                      AUXR |= 0x15;
  336   4                      TR1 = 0;        //关闭发送中断
  337   4                  }
  338   3                  
  339   3                  P_SW1 &= ~(0x03 << 6);
  340   3                  
  341   3                  if((UART1_RX_P30 == rx_pin) && (UART1_TX_P31 == tx_pin))
  342   3                  {
  343   4                      P_SW1 |= 0x00;
  344   4                  }
  345   3                  else if((UART1_RX_P36 == rx_pin) && (UART1_TX_P37 == tx_pin))
  346   3                  {
  347   4                      P_SW1 |= 0x40;
  348   4                  }
  349   3                  else if((UART1_RX_P16 == rx_pin) && (UART1_TX_P17 == tx_pin))
  350   3                  {
  351   4                      P_SW1 |= 0x80;
  352   4                  }
  353   3                  else if((UART1_RX_P43 == rx_pin) && (UART1_TX_P44 == tx_pin))
  354   3                  {
  355   4                      P_SW1 |= 0xc0;
  356   4                  }
  357   3                  
  358   3                  //            ES = 1;       //允许串行口1中断
  359   3                  break;
  360   3              }
  361   2              
  362   2              case UART_2:
  363   2              {
C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 7   

  364   3                  //            if(TIM_2 == tim_n)
  365   3                  {
  366   4                      S2CON |= 0x50;
  367   4                      T2L = brt;
  368   4                      T2H = brt >> 8;
  369   4                      AUXR |= 0x14;
  370   4                  }
  371   3                  
  372   3                  P_SW2 &= ~(0x01 << 0);
  373   3                  
  374   3                  if((UART2_RX_P12 == rx_pin) && (UART2_TX_P13 == tx_pin))
  375   3                  {
  376   4                      P_SW2 |= 0x00;
  377   4                  }
  378   3                  else if((UART2_RX_P42 == rx_pin) && (UART2_TX_P43 == tx_pin))
  379   3                  {
  380   4                      P_SW2 |= 0x01;
  381   4                  }
  382   3                  
  383   3                  //            IE2 |= 0x01 << 0;     //允许串行口2中断
  384   3                  
  385   3                  break;
  386   3              }
  387   2              
  388   2              case UART_3:
  389   2              {
  390   3                  //            if(TIM_2 == tim_n)
  391   3                  {
  392   4                      S3CON |= 0x10;
  393   4                      T2L = brt;
  394   4                      T2H = brt >> 8;
  395   4                      AUXR |= 0x14;
  396   4                  }
  397   3                  //            else if(TIM_3 == tim_n)
  398   3                  //            {
  399   3                  //                S3CON |= 0x50;
  400   3                  //                T3L = brt;
  401   3                  //                T3H = brt >> 8;
  402   3                  //                T4T3M |= 0x0a;
  403   3                  //            }
  404   3                  
  405   3                  P_SW2 &= ~(0x01 << 1);
  406   3                  
  407   3                  if((UART3_RX_P00 == rx_pin) && (UART3_TX_P01 == tx_pin))
  408   3                  {
  409   4                      P_SW2 |= 0x00;
  410   4                  }
  411   3                  else if((UART3_RX_P50 == rx_pin) && (UART3_TX_P51 == tx_pin))
  412   3                  {
  413   4                      P_SW2 |= 0x02;
  414   4                  }
  415   3                  
  416   3                  //            IE2 |= 0x01 << 3;     //允许串行口3中断
  417   3                  
  418   3                  break;
  419   3              }
  420   2              
  421   2              case UART_4:
  422   2              {
  423   3                  //            if(TIM_2 == tim_n)
  424   3                  {
  425   4                      S4CON |= 0x10;
  426   4                      T2L = brt;
  427   4                      T2H = brt >> 8;
  428   4                      AUXR |= 0x14;
  429   4                  }
C251 COMPILER V5.60.0,  zf_driver_uart                                                     26/09/25  17:50:06  PAGE 8   

  430   3                  //            else if(TIM_4 == tim_n)
  431   3                  //            {
  432   3                  //                S4CON |= 0x50;
  433   3                  //                T4L = brt;
  434   3                  //                T4H = brt >> 8;
  435   3                  //                T4T3M |= 0xa0;
  436   3                  //            }
  437   3                  
  438   3                  P_SW2 &= ~(0x01 << 2);
  439   3                  
  440   3                  if((UART4_RX_P02 == rx_pin) && (UART4_TX_P03 == tx_pin))
  441   3                  {
  442   4                      P_SW2 |= 0x00;
  443   4                  }
  444   3                  else if((UART4_RX_P52 == rx_pin) && (UART4_TX_P53 == tx_pin))
  445   3                  {
  446   4      //                P5M0 = 0x00;
  447   4      //                P5M1 = 0x01 << 2; //P5.2 需要设置为高阻
  448   4                      P_SW2 |= 0x04;
  449   4                  }
  450   3                  
  451   3                  //            IE2 |= 0x01 << 4;     //允许串行口4中断
  452   3                  
  453   3                  break;
  454   3              }
  455   2              
  456   2          }
  457   1          
  458   1              // uart dma 初始化
  459   1          uart_dma_init(uart_n);
  460   1          
  461   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1690     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        12        267
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =        65     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
