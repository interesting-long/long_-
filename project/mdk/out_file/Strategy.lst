C251 COMPILER V5.60.0,  Strategy                                                           18/10/25  11:27:17  PAGE 1   


C251 COMPILER V5.60.0, COMPILATION OF MODULE Strategy
OBJECT MODULE PLACED IN .\out_file\Strategy.obj
COMPILER INVOKED BY: D:\keil\C251\BIN\C251.EXE ..\code\Strategy.c LARGE NOALIAS FLOAT64 WARNINGLEVEL(3) OPTIMIZE(3,SIZE)
                    - BROWSE INCDIR(..\..\libraries\zf_common;..\..\libraries\zf_components;..\..\libraries\zf_device;..\..\libraries\zf_driv
                    -er;..\user;..\code) DEBUG PRINT(.\out_file\Strategy.lst) OBJECT(.\out_file\Strategy.obj) 

stmt  level    source

    1          #include "Strategy.h"
    2          unsigned int if_time=0;
    3          unsigned int if2_time=0;
    4          unsigned int Continue_Time=0;
    5          unsigned char Enter_Flag_Left=0;
    6          unsigned char Cycle_Stat=EXIT;
    7          
    8          unsigned char Road_Stat=Short_Str;
    9          
   10          unsigned int Short_Time=0;
   11          unsigned int Long_Time=0;
   12          unsigned int Bend_Time=0;
   13          unsigned int SLOW_Time=0;
   14          unsigned int Accel_Time=0;
   15          
   16          unsigned int Entern_Flag_Time=0;
   17          unsigned int Entern_Delay_Time=0;
   18          unsigned int Entern_Continue_Time=0;
   19          int turn_Value=0;
   20          int Mode_Flag=0;
   21          
   22          
   23          //环岛判断
   24          void if_Cycle(void)
   25          {
   26   1              switch(Cycle_Stat)
   27   1              {
   28   2                      case EXIT:
   29   2                      {
   30   3                              
   31   3                              if(ADC_2==1023 || ADC_3==1023 )
   32   3                              {
   33   4                                      if_time++;
   34   4                                      if(if_time>Entern_Flag_Time)
   35   4                                      {
   36   5                                              Cycle_Stat=APPROACH;
   37   5                                              if_time=0;
   38   5                                      }
   39   4                              }
   40   3                              else
   41   3                              {
   42   4                                      if_time=0;
   43   4                              }
   44   3                              break;
   45   3                      }
   46   2                      case APPROACH:
   47   2                      {
   48   3                                      if2_time++;
   49   3                                      if(if2_time>Entern_Delay_Time)
   50   3                                      {
   51   4                                              Cycle_Stat=Left_ENTER;
   52   4                                              if2_time=0;
   53   4                                      }
   54   3                              break;
   55   3                      }
   56   2                      case Left_ENTER:
   57   2                      {
C251 COMPILER V5.60.0,  Strategy                                                           18/10/25  11:27:17  PAGE 2   

   58   3                              Enter_Flag_Left=1;
   59   3                              Buzzer_ON();
   60   3                              Continue_Time++;
   61   3                              if(Continue_Time>Entern_Continue_Time)
   62   3                              {
   63   4                                      Cycle_Stat=EXIT;
   64   4                                      Continue_Time = 0;  //
   65   4                      Enter_Flag_Left = 0;     //
   66   4                                      Buzzer_OFF();
   67   4                              }
   68   3                              break;
   69   3                      }
   70   2                      default :
   71   2                      {
   72   3                              CAR_STOP();
   73   3                              break;
   74   3                      }
   75   2              }
   76   1      
   77   1      }
   78          //切弯补丁
   79          int Help_turn()
   80          {
   81   1              int left  = ADC_1 + ADC_2;
   82   1              int right = ADC_3 + ADC_4;
   83   1              if (left < 200 && right < 200)
   84   1              {
   85   2                      // 同时满足，取较小一侧优先
   86   2                      if (left < right)
   87   2                              return -50;   // 左
   88   2                      else
   89   2                              return 50;    // 右
   90   2              }
   91   1              else if (left < 200)
   92   1              {
   93   2                      return -50;   // 左
   94   2              }
   95   1              else if (right < 200)
   96   1              {
   97   2                      return 50;    // 右
   98   2              }
   99   1              else
  100   1              {
  101   2                      return 0;     // 不转
  102   2              }
  103   1      }
  104          void Help_turn2(int* temp, int value, int ADC_Flag)
  105          {
  106   1          static int last_dir = 0;    // -1 左，+1 右，0 未定
  107   1          static int first_double = 1; // 是否是第一次进入“双小”状态
  108   1      
  109   1          int left  = ADC_1 + ADC_2;
  110   1          int right = ADC_3 + ADC_4;
  111   1          const int delta = 15;  // 左右接近的最小差值门限
  112   1      
  113   1          if (left < ADC_Flag && right < ADC_Flag)
  114   1          {
  115   2              if (first_double) // ★第一次双小
  116   2              {
  117   3                  if (left < right)
  118   3                  {
  119   4                      *temp = -value;   // 左
  120   4                      last_dir = -1;
  121   4                  }
  122   3                  else
  123   3                  {
C251 COMPILER V5.60.0,  Strategy                                                           18/10/25  11:27:17  PAGE 3   

  124   4                      *temp = value;    // 右
  125   4                      last_dir = 1;
  126   4                  }
  127   3                  first_double = 0; // 标记已经处理过第一次
  128   3              }
  129   2              else // ★后续双小
  130   2              {
  131   3                  if (abs(left - right) < delta)
  132   3                  {
  133   4                      // 按照上次方向走
  134   4                      if (last_dir == -1) *temp = -value;
  135   4                      else if (last_dir == 1) *temp = value;
  136   4                      else *temp = value; // 默认
  137   4                  }
  138   3                  else if (left < right)
  139   3                  {
  140   4                      *temp = -value;
  141   4                      last_dir = -1;
  142   4                  }
  143   3                  else
  144   3                  {
  145   4                      *temp = value;
  146   4                      last_dir = 1;
  147   4                  }
  148   3              }
  149   2          }
  150   1          else if (left < ADC_Flag)
  151   1          {
  152   2              *temp = -value;
  153   2              last_dir = -1;
  154   2              first_double = 1; // 重置，下次再遇到“双小”时重新走第一次逻辑
  155   2          }
  156   1          else if (right < ADC_Flag)
  157   1          {
  158   2              *temp = value;
  159   2              last_dir = 1;
  160   2              first_double = 1; // 同上
  161   2          }
  162   1      }
  163          
  164          int Help_turn_Two(int temp, int value, int value2, int ADC_Flag, int ADC_Flag2)
  165          {
  166   1          int left  = ADC_1 + ADC_2;
  167   1          int right = ADC_3 + ADC_4;
  168   1      
  169   1          // -------- 第一组阈值判断 --------
  170   1          if (left < ADC_Flag && right < ADC_Flag)
  171   1          {
  172   2              return (left < right) ? (Servo_Mide - value) : (Servo_Mide + value);
  173   2          }
  174   1          else if (left < ADC_Flag)
  175   1          {
  176   2              return Servo_Mide - value;
  177   2          }
  178   1          else if (right < ADC_Flag)
  179   1          {
  180   2              return Servo_Mide + value;
  181   2          }
  182   1      
  183   1          // -------- 第二组阈值判断 --------
  184   1          if (left < ADC_Flag2 && right < ADC_Flag2)
  185   1          {
  186   2              return (left < right) ? (Servo_Mide - value2) : (Servo_Mide + value2);
  187   2          }
  188   1          else if (left < ADC_Flag2)
  189   1          {
C251 COMPILER V5.60.0,  Strategy                                                           18/10/25  11:27:17  PAGE 4   

  190   2              return Servo_Mide - value2;
  191   2          }
  192   1          else if (right < ADC_Flag2)
  193   1          {
  194   2              return Servo_Mide + value2;
  195   2          }
  196   1      
  197   1          // -------- 都不满足，返回原值 --------
  198   1          return temp;
  199   1      }
  200          
  201          int State_of_road(void)
  202          {
  203   1              switch(Road_Stat)
  204   1              {
  205   2                      case Short_Str:
  206   2                      {
  207   3                              Motor_Update(Short_add);
  208   3                              if(abs(dajiao)<Stright_Flag_Value)
  209   3                              {
  210   4                                      Long_Time++;
  211   4                                      Bend_Time=0;
  212   4                                      if(Long_Time>Long_Judge_Time)
  213   4                                      {
  214   5                                              Long_Time=0;
  215   5                                              Road_Stat=Long_Str;
  216   5                                      }
  217   4                              }
  218   3                              else
  219   3                              {
  220   4                                      Long_Time=0;
  221   4                                      Bend_Time++;
  222   4                                      {
  223   5                                              if(Bend_Time>Bend_Judge_Time)
  224   5                                              {
  225   6                                                      Bend_Time=0;
  226   6                                                      Road_Stat=Short_Bend;
  227   6                                              }
  228   5                                      }
  229   4                              }
  230   3                              return Short_add;
  231   3                              break;
  232   3                      }
  233   2                      case Long_Str:
  234   2                      {
  235   3                              Motor_Update(Long_add);
  236   3                              Accel_Time++;
  237   3                              if(abs(dajiao)>Bend_Flag_Value)
  238   3                              {
  239   4                                      Bend_Time++;
  240   4                                      if(Bend_Time>Bend_Judge_Time)
  241   4                                      {
  242   5                                              if(Accel_Time>180)//加速时间1.5s
  243   5                                              {
  244   6                                                      Road_Stat=Long_Bend;
  245   6                                                      SLOW_Time = 0;
  246   6                                              }
  247   5                                              else
  248   5                                              {
  249   6                                                      Road_Stat=Short_Bend;
  250   6                                              }
  251   5                                              Bend_Time=0;
  252   5                                              Accel_Time=0;
  253   5                                      }
  254   4                              }
  255   3                              else
C251 COMPILER V5.60.0,  Strategy                                                           18/10/25  11:27:17  PAGE 5   

  256   3                              {
  257   4                                      Bend_Time=0;
  258   4                              }
  259   3                              return Long_add;
  260   3                              break;
  261   3                      }
  262   2                      case Short_Bend:
  263   2                      {
  264   3                              Motor_Update(Bend_speed);
  265   3                              if(abs(dajiao)>Bend_Flag_Value)
  266   3                              {
  267   4                                      Short_Time=0;
  268   4                              }
  269   3                              else
  270   3                              {
  271   4                                      Short_Time++;
  272   4                                      if(Short_Time>Short_Judge_Time)
  273   4                                      {
  274   5                                              Short_Time=0;
  275   5                                              Road_Stat=Short_Str;
  276   5                                      }
  277   4                              }
  278   3                              return Bend_speed;
  279   3                              break;
  280   3                      }
  281   2                      case Long_Bend:
  282   2                      {
  283   3                              SLOW_Time++;
  284   3                              if(SLOW_Time>L_Turn_B_Slow_Time)
  285   3                              {
  286   4                                      Buzzer_OFF();
  287   4                                      Motor_Update(Bend_speed);//弯道速度
  288   4                              }
  289   3                              else
  290   3                              {
  291   4                                      Buzzer_ON();
  292   4                                      
  293   4                                      Motor_Update(L_Turn_B_Slow_Value);//减速
  294   4                              }
  295   3                              //检查是否回到了直道
  296   3                              if(abs(dajiao)<Bend_Flag_Value)
  297   3                              {
  298   4                                      Short_Time++;
  299   4                                      if(Short_Time>Short_Judge_Time)
  300   4                                      {
  301   5                                              Buzzer_OFF();
  302   5                                              Short_Time=0;
  303   5                                              SLOW_Time=0;
  304   5                                              Road_Stat=Short_Str;
  305   5                                      }
  306   4                                      
  307   4                              }
  308   3                              else
  309   3                              {
  310   4                                      Short_Time=0;
  311   4                              }
  312   3                              if(SLOW_Time>L_Turn_B_Slow_Time)
  313   3                              {
  314   4                                      return Bend_speed;
  315   4                              }
  316   3                              else
  317   3                              {
  318   4                                      return L_Turn_B_Slow_Value;
  319   4                              }
  320   3                              
  321   3                              break;
C251 COMPILER V5.60.0,  Strategy                                                           18/10/25  11:27:17  PAGE 6   

  322   3                      }
  323   2                      default :
  324   2                      {
  325   3                              CAR_STOP();
  326   3                              return 0;
  327   3                              break;
  328   3                      }
  329   2              
  330   2              }
  331   1      }


Module Information          Static   Overlayable
------------------------------------------------
  code size            =      1529     ------
  ecode size           =    ------     ------
  data size            =    ------     ------
  idata size           =    ------     ------
  pdata size           =    ------     ------
  xdata size           =        33          2
  xdata-const size     =    ------     ------
  edata size           =    ------     ------
  bit size             =    ------     ------
  ebit size            =    ------     ------
  bitaddressable size  =    ------     ------
  ebitaddressable size =    ------     ------
  far data size        =    ------     ------
  huge data size       =    ------     ------
  const size           =    ------     ------
  hconst size          =       123     ------
End of Module Information.


C251 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
